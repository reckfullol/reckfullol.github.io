<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Reckful&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="//reckful.studio/"/>
  <updated>2021-12-20T07:07:18.861Z</updated>
  <id>//reckful.studio/</id>
  
  <author>
    <name>Reckful</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ACMSGURU 149 - Computer Network</title>
    <link href="//reckful.studio/2021/12/17/ACMSGURU/ACMSGURU%20149%20-%20Computer%20Network/"/>
    <id>//reckful.studio/2021/12/17/ACMSGURU/ACMSGURU%20149%20-%20Computer%20Network/</id>
    <published>2021-12-17T16:16:45.000Z</published>
    <updated>2021-12-20T07:07:18.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Computer-Network"><a href="#Computer-Network" class="headerlink" title="Computer Network"></a>Computer Network</h1><a id="more"></a><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>A school bought the first computer some time ago. During the recent years the school bought N-1 new computers. Each new computer was connected to one of settled earlier. Managers of school are anxious about slow functioning of the net and want to know for each computer number Si - maximum distance, for which i-th computer needs to send signal (i.e. length of cable to the most distant computer). You need to provide this information.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>There is natural number N (N&lt;=10000) in the first line of input, followed by (N-1) lines with descriptions of computers. i-th line contains two natural numbers - number of computer, to which i-th computer is connected and length of cable used for connection. Total length of cable does not exceed 10^9. Numbers in lines of input are separated by a space.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Write N lines in output file. i-th line must contain number Si for i-th computer (1&lt;=i&lt;=N).</p><h2 id="Example-s"><a href="#Example-s" class="headerlink" title="Example(s)"></a>Example(s)</h2><p>Input<br>3<br>1 1<br>1 2</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint64_t</span> n;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint64_t</span> NETWORK_NODE_MAX = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="comment">// index, path</span></span><br><span class="line">    std::vector&lt;std::vector&lt;std::pair&lt;uint64_t , uint64_t &gt;&gt;&gt; network(NETWORK_NODE_MAX, std::vector&lt;std::pair&lt;uint64_t , uint64_t &gt;&gt;&#123;&#125;);</span><br><span class="line">    std::vector&lt;std::priority_queue&lt;uint64_t , std::vector&lt;uint64_t &gt;, std::greater&lt;uint64_t &gt;&gt; &gt; result(NETWORK_NODE_MAX, std::priority_queue&lt;uint64_t , std::vector&lt;uint64_t &gt;, std::greater&lt;uint64_t &gt;&gt;&#123;&#125;);</span><br><span class="line">    std::vector&lt;std::priority_queue&lt;uint64_t , std::vector&lt;uint64_t &gt;, std::greater&lt;uint64_t &gt;&gt;&gt; dp(NETWORK_NODE_MAX, std::priority_queue&lt;uint64_t , std::vector&lt;uint64_t &gt;, std::greater&lt;uint64_t &gt;&gt;&#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// max, second max</span></span><br><span class="line">    <span class="keyword">auto</span> get_heap_result = [](<span class="built_in">std</span>::priority_queue&lt;<span class="keyword">uint64_t</span> , <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">uint64_t</span> &gt;, <span class="built_in">std</span>::greater&lt;<span class="keyword">uint64_t</span> &gt;&gt;&amp; heap) -&gt; <span class="built_in">std</span>::pair&lt;<span class="keyword">uint64_t</span> , <span class="keyword">uint64_t</span> &gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(heap.empty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">uint64_t</span> second_max = heap.top();</span><br><span class="line">        heap.pop();</span><br><span class="line">        <span class="keyword">if</span>(heap.empty()) &#123;</span><br><span class="line">            heap.push(second_max);</span><br><span class="line">            <span class="keyword">return</span> &#123;second_max, <span class="number">0</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">uint64_t</span> max = heap.top();</span><br><span class="line">        heap.push(second_max);</span><br><span class="line">        <span class="keyword">return</span> &#123;max, second_max&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">uint64_t</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">uint64_t</span> father = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">uint64_t</span> path = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; father &gt;&gt; path;</span><br><span class="line">        network[father].push_back(&#123;i, path&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> dfs = <span class="built_in">std</span>::function&lt;<span class="keyword">uint64_t</span> (<span class="keyword">uint64_t</span> )&gt;&#123;&#125;;</span><br><span class="line">    dfs = [&amp;](<span class="keyword">uint64_t</span> index) -&gt; <span class="keyword">uint64_t</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; next : network[index]) &#123;</span><br><span class="line">            dp[index].push(dfs(next.first) + next.second);</span><br><span class="line">            <span class="keyword">if</span>(dp[index].size() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                dp[index].pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> get_heap_result(dp[index]).first;</span><br><span class="line">    &#125;;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// index</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">uint64_t</span> &gt; bfs;</span><br><span class="line">    bfs.push(<span class="number">1</span>);</span><br><span class="line">    result[<span class="number">1</span>] = dp[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(!bfs.empty()) &#123;</span><br><span class="line">        <span class="keyword">uint64_t</span> index = bfs.front();</span><br><span class="line">        bfs.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; next : network[index]) &#123;</span><br><span class="line">            <span class="keyword">uint64_t</span> next_index = next.first;</span><br><span class="line">            <span class="keyword">uint64_t</span> path = next.second;</span><br><span class="line">            <span class="keyword">uint64_t</span> father_max_path = get_heap_result(result[index]).first;</span><br><span class="line">            <span class="keyword">uint64_t</span> father_second_path = get_heap_result(result[index]).second;</span><br><span class="line">            <span class="keyword">uint64_t</span> son_max_path = get_heap_result(dp[next.first]).first;</span><br><span class="line">            <span class="keyword">uint64_t</span> son_second_path = get_heap_result(dp[next.first]).second;</span><br><span class="line">            result[next_index].push(son_max_path);</span><br><span class="line">            result[next_index].push(son_second_path);</span><br><span class="line">            result[next_index].push(father_max_path - son_max_path == path ?</span><br><span class="line">                                        path + father_second_path</span><br><span class="line">                                        :</span><br><span class="line">                                        path + father_max_path);</span><br><span class="line">            result[next_index].pop();</span><br><span class="line">            bfs.push(next_index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">uint64_t</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; get_heap_result(result[i]).first &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Computer-Network&quot;&gt;&lt;a href=&quot;#Computer-Network&quot; class=&quot;headerlink&quot; title=&quot;Computer Network&quot;&gt;&lt;/a&gt;Computer Network&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ACMSGURU" scheme="//reckful.studio/categories/ACMSGURU/"/>
    
    
  </entry>
  
  <entry>
    <title>ACMSGURU 397 - Text Editor</title>
    <link href="//reckful.studio/2021/12/03/ACMSGURU/ACMSGURU%20397%20-%20Text%20Editor/"/>
    <id>//reckful.studio/2021/12/03/ACMSGURU/ACMSGURU%20397%20-%20Text%20Editor/</id>
    <published>2021-12-03T18:13:13.000Z</published>
    <updated>2021-12-20T07:07:18.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preparing-Problem"><a href="#Preparing-Problem" class="headerlink" title="Preparing Problem"></a>Preparing Problem</h1><a id="more"></a><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>The simplest text editor “Open Word” allows to create and edit only one word. The editor processes keys ‘a’ – ‘z’, and also ‘L’ (to the left) and ‘R’ (to the right). After starting his work the editor immediately creates an empty word and sets its cursor to the left-most position. When one of keys ‘a’ – ‘z’ is pressed, the text editor inserts corresponding symbol just after the cursor. After that a cursor moves one position to the right in such a way that it is placed just after new symbol. When key ‘L’ or ‘R’ is pressed, the cursor moves one position to the left or to the right respectively. If the cursor can’t be moved because it is placed at the left-most or right-most position the command is ignored. Developers of “Open Word” didn’t think about the effectiveness so the editor is working slowly if a lot of keys have been pressed.</p><p>Your task is to write a program that can process a sequence of key pressings emulating this editor and output result string.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The input file contains one string which consists of symbols ‘a’ – ‘z’, ‘L’ and ‘R’. The string length is not less than 1 and doesn’t exceed 10^6.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Write a required string to the output file.</p><h2 id="Example-s"><a href="#Example-s" class="headerlink" title="Example(s)"></a>Example(s)</h2><table><thead><tr><th>sample input</th><th>sample output</th></tr></thead><tbody><tr><td>abLcd</td><td>acdb</td></tr></tbody></table><table><thead><tr><th>sample input</th><th>sample output</th></tr></thead><tbody><tr><td>icpLLLLLacmRRRRRRRRRRRRc</td><td>acmicpc</td></tr></tbody></table><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> input;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; input;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="keyword">char</span>&gt; text;</span><br><span class="line">    <span class="keyword">auto</span> it = text.begin();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; c : input) &#123;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">'L'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(it != text.begin()) &#123;</span><br><span class="line">                it--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">'R'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(it != text.end()) &#123;</span><br><span class="line">                it++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        text.insert(it, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; c : text) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Preparing-Problem&quot;&gt;&lt;a href=&quot;#Preparing-Problem&quot; class=&quot;headerlink&quot; title=&quot;Preparing Problem&quot;&gt;&lt;/a&gt;Preparing Problem&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ACMSGURU" scheme="//reckful.studio/categories/ACMSGURU/"/>
    
    
  </entry>
  
  <entry>
    <title>ACMSGURU 114 - Telecasting station</title>
    <link href="//reckful.studio/2021/08/26/ACMSGURU/ACMSGURU%20114%20-%20Telecasting%20station/"/>
    <id>//reckful.studio/2021/08/26/ACMSGURU/ACMSGURU%20114%20-%20Telecasting%20station/</id>
    <published>2021-08-26T19:28:36.000Z</published>
    <updated>2021-12-20T07:07:18.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Telecasting-station"><a href="#Telecasting-station" class="headerlink" title="Telecasting station"></a>Telecasting station</h1><a id="more"></a><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>Every city in Berland is situated on Ox axis. The government of the country decided to build new telecasting station. After many experiments Berland scientists came to a conclusion that in any city citizens displeasure is equal to product of citizens amount in it by distance between city and TV-station. Find such point on Ox axis for station so that sum of displeasures of all cities is minimal.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>Input begins from line with integer positive number N (0&lt;N&lt;15000) – amount of cities in Berland. Following N pairs (X, P) describes cities (0&lt;X, P&lt;50000), where X is a coordinate of city and P is an amount of citizens. All numbers separated by whitespace(s).</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Write the best position for TV-station with accuracy 10^-5.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 3</span><br><span class="line">2 1</span><br><span class="line">5 2</span><br><span class="line">6 2</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.00000</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">double</span> p_left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> p_right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> s_left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> s_right = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    std::vector&lt;std::pair&lt;double, double&gt;&gt; cities(n, std::pair&lt;double, double&gt;());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; city : cities) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; city.first &gt;&gt; city.second;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">std</span>::sort(cities.begin(), cities.end(), [](<span class="built_in">std</span>::pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; a, <span class="built_in">std</span>::pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.first &lt; b.first;</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        p_right += cities[i].second;</span><br><span class="line">        s_right += cities[i].first * cities[i].second;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">double</span> sum = LONG_LONG_MAX;</span><br><span class="line">    <span class="keyword">double</span> index = cities[<span class="number">0</span>].first;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        p_right -= cities[i].second;</span><br><span class="line">        p_left += cities[i].second;</span><br><span class="line">        s_right -= cities[i].first * cities[i].second;</span><br><span class="line">        s_left += cities[i].first * cities[i].second;</span><br><span class="line">        <span class="keyword">double</span> a = cities[i].first * (p_left - p_right) + (s_right - s_left);</span><br><span class="line">        <span class="keyword">double</span> b = cities[i + <span class="number">1</span>].first * (p_left - p_right) + (s_right - s_left);</span><br><span class="line">        <span class="keyword">if</span>(sum - a &gt; <span class="number">1e-8</span>) &#123;</span><br><span class="line">            sum = a;</span><br><span class="line">            index = cities[i].first;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(sum - b &gt; <span class="number">1e-8</span>) &#123;</span><br><span class="line">            sum = b;</span><br><span class="line">            index = cities[i + <span class="number">1</span>].first;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="built_in">std</span>::setiosflags(<span class="built_in">std</span>::ios::fixed);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="built_in">std</span>::setprecision(<span class="number">5</span>) &lt;&lt; index &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Telecasting-station&quot;&gt;&lt;a href=&quot;#Telecasting-station&quot; class=&quot;headerlink&quot; title=&quot;Telecasting station&quot;&gt;&lt;/a&gt;Telecasting station&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ACMSGURU" scheme="//reckful.studio/categories/ACMSGURU/"/>
    
    
  </entry>
  
  <entry>
    <title>ACMSGURU 127 - Telephone directory</title>
    <link href="//reckful.studio/2021/06/10/ACMSGURU/ACMSGURU%20127%20-%20Telephone%20directory/"/>
    <id>//reckful.studio/2021/06/10/ACMSGURU/ACMSGURU%20127%20-%20Telephone%20directory/</id>
    <published>2021-06-10T16:19:39.000Z</published>
    <updated>2021-12-20T07:07:18.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Telephone-directory"><a href="#Telephone-directory" class="headerlink" title="Telephone directory"></a>Telephone directory</h1><a id="more"></a><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>CIA has decided to create a special telephone directory for its agents. The first 2 pages of the directory contain the name of the directory and instructions for agents, telephone number records begin on the third page. Each record takes exactly one line and consists of 2 parts: the phone number and the location of the phone. The phone number is 4 digits long. Phone numbers cannot start with digits 0 and 8. Each page of the telephone directory can contain not more then K lines. Phone numbers should be sorted in increasing order. For the first phone number with a new first digit, the corresponding record should be on a new page of the phone directory. You are to write a program, that calculates the minimal number P pages in the directory. For this purpose, CIA gives you the list of numbers containing N records, but since the information is confidential, without the phones locations.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line contains a natural number K (0 &lt; K &lt; 255) - the maximum number of lines that one page can contain. The second line contains a natural N (0 &lt; N &lt; 8000) - number of phone numbers supplied. Each of following N lines contains a number consisting of 4 digits - phone numbers in any order, and it is known, that numbers in this list cannot repeat.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>First line should contain a natural number P - the number of pages in the telephone directory.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">10</span><br><span class="line">1234</span><br><span class="line">5678</span><br><span class="line">1345</span><br><span class="line">1456</span><br><span class="line">1678</span><br><span class="line">1111</span><br><span class="line">5555</span><br><span class="line">6789</span><br><span class="line">6666</span><br><span class="line">5000</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">numbers</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; num : numbers) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">counts</span><span class="params">(<span class="number">10</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; num : numbers) &#123;</span><br><span class="line">        counts[num / <span class="number">1000</span>] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        res += <span class="keyword">int</span>(<span class="built_in">std</span>::<span class="built_in">ceil</span>((<span class="built_in">std</span>::max(counts[i] - k, <span class="number">0</span>) * <span class="number">1.0</span> / k))) + (counts[i] == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Telephone-directory&quot;&gt;&lt;a href=&quot;#Telephone-directory&quot; class=&quot;headerlink&quot; title=&quot;Telephone directory&quot;&gt;&lt;/a&gt;Telephone directory&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ACMSGURU" scheme="//reckful.studio/categories/ACMSGURU/"/>
    
    
  </entry>
  
  <entry>
    <title>Operating System 14 - 分支预测分析</title>
    <link href="//reckful.studio/2021/05/17/Operating%20System/Operating%20System%2014%20-%20%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%88%86%E6%9E%90/"/>
    <id>//reckful.studio/2021/05/17/Operating%20System/Operating%20System%2014%20-%20%E5%88%86%E6%94%AF%E9%A2%84%E6%B5%8B%E5%88%86%E6%9E%90/</id>
    <published>2021-05-17T20:32:50.000Z</published>
    <updated>2021-12-20T07:07:18.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分支预测分析"><a href="#分支预测分析" class="headerlink" title="分支预测分析"></a>分支预测分析</h1><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>业务中在高频调用代码段会出现条件判断语句, 因此联想cpu架构中的分支预测功能, 进行简要分析.</p><h3 id="指令流水线"><a href="#指令流水线" class="headerlink" title="指令流水线"></a>指令流水线</h3><p>指令流水线通过将指令拆分为若干个连续, 独立的步骤来提升单位时间内同时执行的指令数(吞吐量).</p><h4 id="流水线-非流水线对比"><a href="#流水线-非流水线对比" class="headerlink" title="流水线/非流水线对比"></a>流水线/非流水线对比</h4><ul><li>流水线架构: 基于MIPS架构的CPU<strong>五级流水线</strong>, 在一个时钟周期最多可以同时处理五个独立步骤:<ul><li>a: 读取指令(Instruction Fetch).</li><li>b: 解码指令和读取寄存器(Instruction Decode and Register Fetch).</li><li>c: 算术运算(Arithmetic Computation).</li><li>d: 内存访问(Memory Read or Write).</li><li>e: 回写寄存器(Register Write).</li></ul></li><li>benchmark: 9条相同简单<strong>指令</strong>.</li><li>测试结果[1]:<ul><li>非流水线模式:<img src="https://i.loli.net/2021/05/17/q5rSsMhmFl9vbEx.png" alt="image.png"></li><li>流水线模式:<img src="https://i.loli.net/2021/05/17/YK31dDcM2EejBVv.png" alt="image.png"></li></ul></li><li>分析:<br>非流水线模式<strong>后继步骤需要等待前序步骤的完成</strong>, 模块大部分时间处于idle状态.<br>比较相同9个简单指令在不同模式完成时间, <strong>非流水线模式需要40个时钟周期(200ns), 流水线模式需要13个时钟周期(65ns)</strong>.<img src="https://i.loli.net/2021/05/17/eU4ZntQCX6sfiE2.png" alt="image.png"></li></ul><h3 id="分支预测"><a href="#分支预测" class="headerlink" title="分支预测"></a>分支预测</h3><p>流水线能够在同一个时钟周期处理多个步骤的充分条件是: <strong>每个步骤相互独立, 不存在依赖关系</strong>. 指令流水时, 处理器遇到分支指令, 不能在开始阶段就判断出分支结果, 即<strong>控制冒险(分支冒险)</strong>.<br>避免控制冒险的方法:<br>    1.  在分支指令后插入流水线冒泡, 直到分支指令的流水执行完毕.<img src="https://i.loli.net/2021/05/17/KqLEbDRBmlpdPe9.png" alt="image.png"><br>    2. 使用<strong>分支预测</strong>(在分支指令执行结束之前猜测哪一路分支将会被运行), 然后<strong>投机执行</strong>. 如果分支预测失败, 则要有能力<strong>恢复到分支指令执行完毕时刻的寄存器状态</strong>, 进入正确的分支继续执行.</p><p>分支预测分为两个大类: <strong>静态预测</strong>和<strong>动态预测</strong>:<br>    1. 静态预测: 无论执行什么指令, 分支预测器总是执行相同的预测策略(无状态).<br>    2. 动态预测: 会根据执行指令的不同, 依据program counter(PC)的值以及历史信息等做出不同的预测(有状态).</p><h4 id="分支预测策略对比"><a href="#分支预测策略对比" class="headerlink" title="分支预测策略对比"></a>分支预测策略对比</h4><ul><li>分支预测策略:<ol><li>静态预测:<ul><li>Strategy 1: 预测所有分支都会跳转(Predict that all branches will be taken).</li><li>Strategy 1a: 某些指令一律跳转, 其余指令一律不跳转, 例如判断大于等于操作一律跳转(Predict that all branches with certain operation codes will be taken; predict that the others will not be taken.).</li><li>Strategy 3: 预测向低地址空间的分支跳转, 向高地址空间的分支不跳转. 地址指地址空间前后, 主要场景是每当到了一个循环的末尾判断是否继续循环时会预测向前跳转继续循环(Predict that all backward branches (toward lower addresses) will be taken; predict that all forward branches will not be take).</li></ul></li><li>动态预测:<ul><li>Strategy 2: 做出和上次是否跳转一样的预测, 默认跳转(Predict that a branch will be decided the same way as it was on its last execution. If it has not been previously executed, predict that it will be taken).</li><li>Strategy 4: 维护没有分支跳转的表, 如果当前分支在表中, 预测不跳转, 反之预测跳转. 如果实际跳转, 则从表中移除该项, 该表遵循LRU(Maintain a table of the most recently used branch instructions that are not taken. If a branch instruction is in the table, predict that it will not be taken; otherwise predict that it will be taken. Purge table entries if they are taken, and use LRU replacement to add new entries).</li><li>Strategy 5: 在cache中用bit表记录分支指令的跳转结果, 预测当前分支指令与一致, 默认跳转, bit表遵循LRU(Maintain a bit for each instruction in the cache. If an instruction is a branch instruction, the bit is used to record if it was taken on its last execution. Branches are predicted to be decided as on their last execution; if a branch has not been executed, it is predicted to be taken (implemented by initializing the bit cache to taken when an instruction is first placed in cache)).</li><li>Strategy 6: 在RAM中用哈希表维护分支指令的跳转结果, 预测当前分支结果与上次一致(Hash the branch instruction address to m bits and use this index to address a random access memory containing the outcome of the most recent branch instruction indexing the same location. Predict that the branch outcome will be the same).</li><li>Strategy 7: 基于Strategy 6将表项内容替换为2-bit状态机(saturated counter), 初始值为00, 每当分支跳转则加1, 反之减一, 根据首位预测当前分支跳转.<img src="https://i.loli.net/2021/05/17/ZIjTKWmuLENH4Ca.png" alt="image.png"></li></ul></li></ol></li><li>benchmark:<ol><li>ADVAN : 计算三个联立偏微分方程的解(Calculates the solution of three simultaneous partial differential equations).</li><li>SCI2: 计算矩阵求逆(Performs matrix inversion).</li><li>SINCOS: 将一系列点从极坐标转换为笛卡尔坐标(Converts a series of points from polar to Cartesian coordinates).</li><li>SORTST: 对10,000个整数进行希尔排序(Sorts a list of 10,000 integers using the shell sort algorithm).</li><li>GIBSON: 模拟GIBSON max算法(An artificial program that compiles to instructions that roughly satisfy the so called GIBSON mix).</li><li>TBLLNK: 大量条件判断下进行链表操作(Processes a linked list and contains a variety of conditional branches).</li></ol></li><li>测试结果[2]:<img src="https://i.loli.net/2021/05/17/OwGlZKTgQeHhYqn.png" alt="image.png"><br>  平均分支预测成功率86%, 最大分支预测成功率99.4%, 说明主流分支预测策略对于常见逻辑运算有不错表现.<img src="https://i.loli.net/2021/05/17/lFmkxyjY9hnuq7v.png" alt="image.png"></li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li>CPU: Intel(R) Xeon(R) CPU E5-2670 v3 @ 2.30GHz(perf 2.6GHz).</li><li>benchmark: 基于数组的条件遍历, 数组元素[0, 255], 通过分支执行条件<code>data[c] &gt; number</code>控制分支执行概率<a href="https://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array" target="_blank" rel="noopener">benchmark</a>.<h3 id="有序数组-无序数组对比"><a href="#有序数组-无序数组对比" class="headerlink" title="有序数组/无序数组对比"></a>有序数组/无序数组对比</h3></li><li>benchmark: 3.2e9有序/无序数组条件遍历求和, 分支执行概率<strong>50%</strong>.</li><li>测试结果:<img src="https://i.loli.net/2021/05/17/gpZ78lP1VqOEywr.png" alt="image.png"></li><li>分析:<ol><li>有序数组分支预测成功率提高24.48%, <strong>接近100%</strong>. 说明<strong>分支预测成功率与逻辑局部性显著性相关</strong>, 测试CPU基于<strong>动态预测策略</strong>.</li><li>任务耗时倒数比与IPC比, 分支处理速度比基本一致. 说明<strong>测试程序执行效率主要取决于分支处理速度, 根本上取决于流水线的并行程度</strong>. </li><li>平均单次分支预测失败增加任务耗时(26.46 - 9.09) / (1608893451 - 441722)  = 1.07992e-08s = <strong>10.7992ns</strong>, 增加时钟周期1.07992e-08 / (1 / 2.6e9) = <strong>28个</strong>.</li></ol></li></ul><h3 id="IF-ELSE对比"><a href="#IF-ELSE对比" class="headerlink" title="IF/ELSE对比"></a>IF/ELSE对比</h3><ul><li>benchmark: 3.2e9无序数组条件遍历求和<strong>逻辑分别运行在IF和ELSE分支</strong>, 分支执行概率80%.</li><li>测试结果:<img src="https://i.loli.net/2021/05/17/KIjfnNTiZpxdPc7.png" alt="image.png"></li><li>分析:<ol><li>任务耗时, IPC和分支预测成功率近似相等, 说明<strong>逻辑放置IF或ELSE分支对性能无明显影响</strong>.</li></ol></li></ul><h3 id="分支执行概率对比"><a href="#分支执行概率对比" class="headerlink" title="分支执行概率对比"></a>分支执行概率对比</h3><ul><li>benchmark: 3.2e9无序数组条件遍历求和, 分支执行概率<strong>{50%, 60 %, 70%, 80%, 90%, 100%}</strong>.</li><li>测试结果:<img src="https://i.loli.net/2021/05/17/CkBpUNxPqaMw93h.png" alt="image.png"></li><li>分析:<ol><li>随着分支执行概率增加, 任务耗时线性减少; IPC, 分支处理速度和分支预测成功率线性增加.</li><li>各项参数与分支执行概率进行<strong>相关性分析</strong>, 发现与分支执行概率<strong>显著性相关</strong>.<img src="https://i.loli.net/2021/05/17/DGQskV6KdE27R3C.png" alt="image.png"></li></ol></li></ul><h3 id="有无分支判断语句对比"><a href="#有无分支判断语句对比" class="headerlink" title="有无分支判断语句对比"></a>有无分支判断语句对比</h3><ul><li><p>benchmark: 3.2e9无序数组条件遍历求和, 比较分支执行概率<strong>100%</strong>与无分支判断语句.</p></li><li><p>测试数据:<img src="https://i.loli.net/2021/05/17/OVLQvMAJpmuUqIw.png" alt="image.png"></p></li><li><p>分析:</p><ol><li><p>增加分支逻辑语句后, 指令数增加9831210237次. 分支逻辑调用次数增加3276800000次(数组元素个数), 做比得到9831210237 / 3276800000 = 3. <strong>猜想测试程序中单次分支逻辑相当于执行三次CPU指令</strong>. 我们比较C++文件差异和汇编文件差异:</p><ol><li><p>C++文件差异:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">unsorted_with_if.cpp, unsorted_without_if.cpp</span><br><span class="line">&lt;             if (data[c] &gt;= 0)</span><br><span class="line">&lt;             &#123;</span><br><span class="line">&lt;                 sum += data[c];</span><br><span class="line">&lt;             &#125;</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">&gt;             sum += data[c];</span><br></pre></td></tr></table></figure></li><li><p>汇编文件差异:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">! .L7:</span></span><br><span class="line">&lt;   testl   %eax, %eax</span><br><span class="line">&lt;   js  .L6; 实际逻辑不会执行分支跳转</span><br><span class="line">&lt;   movl-24(%rbp), %eax</span><br><span class="line">&lt;  movl-131120(%rbp,%rax,4), %eax ; %eax = data[c]</span><br><span class="line">    cltq; cltq = movslq %eax, %rax; %rax = data[c]</span><br><span class="line">    addq    %rax, -16(%rbp); sum += data[c]</span><br><span class="line"><span class="deletion">- .L6:</span></span><br><span class="line">    addl    $1, -24(%rbp)</span><br></pre></td></tr></table></figure></li><li><p>因为逻辑控制分支保证始终跳转, 因此实际增加的汇编指令调用为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">testl   %eax, %eax</span><br><span class="line">movl-24(%rbp), %eax</span><br><span class="line">movl-131120(%rbp,%rax,4), %eax</span><br></pre></td></tr></table></figure></li></ol><p> <strong>实际分支逻辑添加导致汇编指令数量增加了3条, 与猜想一致</strong>(汇编指令集与CPU指令集基本对应).</p></li><li><p>删除分支逻辑语句后流水线并行程度下降, 但程序指令数减少, <strong>整体任务耗时降低</strong>.</p></li><li><p>平均单次分支逻辑语句增加任务耗时 (2.18 - 1.69) / 3276800000 = 1.49536e-10s = <strong>0.149536ns</strong>, 增加指令周期 1.49536e-10 / (1 / 2.6e9) = <strong>0.38个</strong>. 因为分支预测成功率为100%, 所以说明<strong>分支预测成功下平均单次分支逻辑语句的性能开销极低</strong>.<img src="https://i.loli.net/2021/05/17/WMUiEuXe8PgO6cz.png" alt="image.png"></p></li></ol></li></ul><h3 id="builtin-expect对比"><a href="#builtin-expect对比" class="headerlink" title="__builtin_expect对比"></a>__builtin_expect对比</h3><ul><li><p>benchmark: 3.2e9无序数组条件遍历求和, 分别测试有无<a href="https://www.ibm.com/docs/en/zos/2.2.0?topic=performance-builtin-expect" target="_blank" rel="noopener">__builtin_expect</a>内置函数, 分支执行概率<strong>80%</strong>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(__builtin_expect(!!(data[c] &gt; number), <span class="literal">true</span>))</span><br></pre></td></tr></table></figure></li><li><p>测试数据:<img src="https://i.loli.net/2021/05/17/BVPw35pi2M4QcNG.png" alt="image.png"></p></li><li><p>分析:</p><ol><li><p>任务耗时, IPC和分支预测成功率近似相等, 说明有无<code>__builtin_expect</code>内置函数对性能无明显影响.</p></li><li><p>查看插入__builtin_expect后汇编文件:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">truemovl-24(%rbp), %eax</span><br><span class="line">truemovl-131120(%rbp,%rax,4), %eax</span><br><span class="line">truecmpl$50, %eax</span><br><span class="line">&lt;setg%al; 取出cmp结果</span><br><span class="line">&lt;movzbl%al, %eax; %eax = cmp结果</span><br><span class="line">&lt;testq%rax, %rax; cmp $0, %rax</span><br><span class="line">trueje.L6</span><br><span class="line">truemovl-24(%rbp), %eax</span><br><span class="line">truemovl-131120(%rbp,%rax,4), %eax</span><br><span class="line">truecltq</span><br><span class="line">trueaddq%rax, -16(%rbp)</span><br></pre></td></tr></table></figure><p><code>__builtin_expect</code>并<strong>无实质逻辑优化</strong>.</p></li></ol></li></ul><h3 id="编译器优化等级对比"><a href="#编译器优化等级对比" class="headerlink" title="编译器优化等级对比"></a>编译器优化等级对比</h3><ul><li><p>benchmark: 3.2e9无序数组条件遍历求和, 分别测试不同编译器优化等级, 分支执行概率<strong>50%</strong>.</p></li><li><p>测试数据:<img src="https://i.loli.net/2021/05/17/2vLnq9jTzXkhHUp.png" alt="image.png"></p></li><li><p>分析:</p><ol><li><p>随着编译优化等级提高, 任务耗时减少; IPC, 分支处理速度和分支预测成功率提高.</p></li><li><p>任务耗时有两次明显下降:<img src="https://i.loli.net/2021/05/17/sdBc1OfiHjr4bUA.png" alt="image.png"></p><ol><li><p>O0 -&gt; O1: 任务耗时降低41%, 分支预测成功率无明显变化, 任务耗时反比为1 / (15.58 / 26.46) = 1.69833, 分支处理速度比为 420.85 / 248.17 = 1.69581. 说明<strong>O1阶段编译器主要优化分支处理速度</strong>.<img src="https://i.loli.net/2021/05/17/bgh7Dx69BT2GXkf.png" alt="image.png"></p></li><li><p>O2 -&gt; O3: 任务耗时降低75%, 分支预测成功率提高24.5%至99.99%.<img src="https://i.loli.net/2021/05/17/MxIAR8rtEKqQkSV.png" alt="image.png"><br>O3汇编代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.L7:</span><br><span class="line">    movl    (%rdx), %ecx</span><br><span class="line">    movslq  %ecx, %rsi ; %rsi = data[c]</span><br><span class="line">    addq    %rbx, %rsi ; %rsi += sum</span><br><span class="line">    cmpl    $127, %ecx ; 127 - data[c]</span><br><span class="line">    cmovg   %rsi, %rbx ; sum = %rsi</span><br><span class="line">; 指令重排, 占用%rsi寄存器临时存储结果; cmovg条件赋值%rsi给sum(做差结果存储在RFLAGS寄存器)</span><br></pre></td></tr></table></figure><p>分析发现:</p><ol><li>通过<strong>指令重排</strong>预先计算分支内结果, 暂存在寄存器中.</li><li>使用<strong>CMOVG</strong>汇编指令, 根据RFLAGS标志条件执行, 规避因跳转而可能引起的分支预测陷阱, 使其分支预测成功率接近100%.<img src="https://i.loli.net/2021/05/17/pi69hWLUdbHSslP.png" alt="image.png"></li></ol></li></ol></li></ol></li></ul><h3 id="BitHack对比"><a href="#BitHack对比" class="headerlink" title="BitHack对比"></a>BitHack对比</h3><ul><li><p>benchmark: 3.2e9无序数组条件遍历求和, 分别测试条件分支语句与<a href="http://graphics.stanford.edu/~seander/bithacks.html" target="_blank" rel="noopener">BitHack</a>实现, 分支执行概率<strong>50%</strong>:<br>  BitHack C++:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt; int t = (data[c] - 128) &gt;&gt; 31;</span><br><span class="line">&lt; sum += ~t &amp; data[c];</span><br><span class="line">&gt; if (data[c] &gt;= 128)</span><br><span class="line">&gt;    sum += data[c];</span><br></pre></td></tr></table></figure><p>  <strong>条件判断结果做差方式存储在标志位t中, ~t &amp;的方式条件操作</strong>:</p><ul><li>data[c] &gt;= 128: t = 0, ~0 &amp; n = n.</li><li>data[c] &lt; 128: t = -1; ~-1 &amp; n = 0.</li></ul></li><li><p>测试数据:<img src="https://i.loli.net/2021/05/17/U72ejFLk9nEmxco.png" alt="image.png"></p></li><li><p>分析:</p><ol><li>BitHack与有序数组O3优化, 无序数组O3优化性能开销基本相同.<img src="https://i.loli.net/2021/05/17/RiHWtNB8AbEVuUs.png" alt="image.png"></li></ol></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>现代分支预测器在通用场景下的分支预测成功率平均值在70%以上, 逻辑局部性越明显, 分支预测成功率越高.</li><li>逻辑放置在IF逻辑分支还是ELSE逻辑分支对性能无明显影响.</li><li><code>__builtin_expect</code>内置函数对分支预测成功率无明显影响.</li><li>不同分支预测结果对分支逻辑执行效率的影响: <ol><li>分支预测成功: 平均任务耗时0.149536ns, 指令周期0.38个. </li><li>分支预测失败: 平均任务耗时10.7992ns, 指令周期28个.</li><li>分支预测失败开销是分支预测成功的72倍.<img src="https://i.loli.net/2021/05/17/zjfdEOe1siBr2bp.png" alt="image.png"></li></ol></li><li>提高分支预测准确率的优化方法:<ol><li>增强逻辑局部性, 增大数据倾斜程度.</li><li>使用<code>-O3</code>编译优化等级或开启<code>-ftree-vectorize</code>编译优化选项, 生成条件移动汇编指令.</li><li>逻辑代码中模拟<strong>CMOV</strong>, 避免显式分支逻辑语句出现.</li></ol></li></ol><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li>[1] Filsinger, M. D. (2005). Understanding CPU Pipelining Through Simulation Programming. <em>age</em>, <em>10</em>, 1.</li><li>[2] Smith, J. E. (1998, August). A study of branch prediction strategies. In <em>25 years of the international symposia on Computer architecture (selected papers)</em> (pp. 202-215).</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分支预测分析&quot;&gt;&lt;a href=&quot;#分支预测分析&quot; class=&quot;headerlink&quot; title=&quot;分支预测分析&quot;&gt;&lt;/a&gt;分支预测分析&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Operating System" scheme="//reckful.studio/categories/Operating-System/"/>
    
    
  </entry>
  
  <entry>
    <title>Unreal 01 - LoadMap</title>
    <link href="//reckful.studio/2021/02/20/Unreal/Unreal%2001%20-%20LoadMap/"/>
    <id>//reckful.studio/2021/02/20/Unreal/Unreal%2001%20-%20LoadMap/</id>
    <published>2021-02-20T16:09:58.000Z</published>
    <updated>2021-12-20T07:07:18.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LoadMap"><a href="#LoadMap" class="headerlink" title="LoadMap"></a>LoadMap</h1><a id="more"></a><h2 id="跟踪分析"><a href="#跟踪分析" class="headerlink" title="跟踪分析"></a>跟踪分析</h2><ol><li><code>TRACE_LOADTIME_REQUEST_GROUP_SCOPE</code>  LoadTime<ol start="2"><li><code>LLM_SCOPE</code> <a href="https://docs.unrealengine.com/zh-CN/ProductionPipelines/DevelopmentSetup/Tools/LowLevelMemoryTracker/index.html" target="_blank" rel="noopener">低级内存跟踪器 | Unreal Engine Documentation</a></li><li><code>NETWORK_PROFILER</code> <a href="https://docs.unrealengine.com/zh-CN/InteractiveExperiences/Networking/NetworkProfiler/index.html" target="_blank" rel="noopener">网络分析器（Network Profiler） | Unreal Engine Documentation</a></li><li><code>MALLOC_PROFILER</code></li></ol></li></ol><h2 id="卸载资源"><a href="#卸载资源" class="headerlink" title="卸载资源"></a>卸载资源</h2><ol><li><p>检查<code>level streaming isn’t frozen</code></p></li><li><p><code>FCoreUObjectDelegates::PreLoadMap.Broadcast(URL.Map);</code> 回调事件通知</p></li><li><p>注册析构函数PostLoadMap().</p></li><li><p>取消等待中的纹理流送请求<code>UTexture2D::CancelPendingTextureStreaming();</code> <a href="https://docs.unrealengine.com/zh-CN/RenderingAndGraphics/Textures/Streaming/Overview/index.html" target="_blank" rel="noopener">纹理流送概述 | Unreal Engine Documentation</a></p></li><li><p>卸载package<a href="https://docs.unrealengine.com/en-US/API/Runtime/Engine/Engine/UEngine/CleanupPackagesToFullyLoad/index.html" target="_blank" rel="noopener">UEngine::CleanupPackagesToFullyLoad | Unreal Engine Documentation</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (WorldContext.World() &amp;&amp; WorldContext.World()-&gt;PersistentLevel)</span><br><span class="line">    &#123;</span><br><span class="line">        CleanupPackagesToFullyLoad(WorldContext, FULLYLOAD_Map, WorldContext.World()-&gt;PersistentLevel-&gt;GetOutermost()-&gt;GetName());</span><br><span class="line">    &#125;</span><br><span class="line">CleanupPackagesToFullyLoad(WorldContext, FULLYLOAD_Game_PreLoadClass, TEXT(<span class="string">""</span>));</span><br><span class="line">CleanupPackagesToFullyLoad(WorldContext, FULLYLOAD_Game_PostLoadClass, TEXT(<span class="string">""</span>));</span><br><span class="line">CleanupPackagesToFullyLoad(WorldContext, FULLYLOAD_Mutator, TEXT(<span class="string">""</span>));</span><br></pre></td></tr></table></figure></li><li><p>强制同步阻塞处理异步加载, 确保没有异步加载还在进行<code>FlushAsyncLoading();</code></p></li><li><p>取消所有等待中的地图异步更改<code>CancelPendingMapChange(WorldContext);</code>, 需要保证<code>FlushAsyncLoading();</code>在这之前执行</p></li><li><p>卸载当前world</p><ol><li><p>关闭网络<code>ShutdownWorldNetDriver(WorldContext.World());</code></p></li><li><p>同步阻塞处理level streaming<code>FlushLevelStreaming</code>, <a href="https://docs.unrealengine.com/en-US/API/Runtime/Engine/Engine/UWorld/FlushLevelStreaming/index.html" target="_blank" rel="noopener">UWorld::FlushLevelStreaming | Unreal Engine Documentation</a></p></li><li><p>向所有level广播卸载事件<code>FWorldDelegates::LevelRemovedFromWorld.Broadcast(nullptr, WorldContext.World());</code></p></li><li><p>将玩家与玩家控制器断开</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WorldContext.World()-&gt;DestroyActor(Player-&gt;PlayerController-&gt;GetPawn(), <span class="literal">true</span>);</span><br><span class="line">WorldContext.World()-&gt;DestroyActor(Player-&gt;PlayerController, <span class="literal">true</span>);</span><br><span class="line">Player-&gt;PlayerController = <span class="literal">nullptr</span>;</span><br></pre></td></tr></table></figure></li><li><p>清除玩家的view state, 防止world不能彻底clean<code>Player-&gt;CleanupViewState();</code>  <a href="https://docs.unrealengine.com/en-US/API/Runtime/Engine/Engine/ULocalPlayer/CleanupViewState/index.html" target="_blank" rel="noopener">ULocalPlayer::CleanupViewState | Unreal Engine Documentation</a> </p></li><li><p>销毁world中的Actor<code>ActorIt-&gt;RouteEndPlay(EEndPlayReason::LevelTransition);</code></p></li><li><p>执行CleanupWorld, <code>WorldContext.World()-&gt;CleanupWorld();</code>, 需在销毁pawns/playercontrollers后, 防止生成新的事物(如丢掉的武器)</p></li><li><p>将world从root set移除<code>WorldContext.World()-&gt;RemoveFromRoot();</code></p></li><li><p>标记object删除<code>CastChecked&lt;UWorld&gt;(Level-&gt;GetOuter())-&gt;MarkObjectsPendingKill();</code></p></li><li><p>标记level删除<code>CastChecked&lt;UWorld&gt;(LevelStreaming-&gt;GetLoadedLevel()-&gt;GetOuter())-&gt;MarkObjectsPendingKill();</code></p></li><li><p>移除audio<code>AudioDevice-&gt;Flush(WorldContext.World());</code></p></li><li><p>设置当前world为空<code>WorldContext.SetCurrentWorld(nullptr);</code></p></li></ol></li><li><p>同步阻塞进行全量GC <code>TrimMemory();</code>.</p></li><li><p>移除强制驻留的资源<code>IStreamingManager::Get().CancelForcedResources();</code></p></li><li><p>检查world是否清理完毕<code>VerifyLoadMapWorldCleanup();</code></p></li></ol><h2 id="加载资源"><a href="#加载资源" class="headerlink" title="加载资源"></a>加载资源</h2><ol><li><p>调用注册函数预加载资源<code>CurrentWorld-&gt;GetGameInstance()-&gt;PreloadContentForURL(PendingTravelURL);</code></p></li><li><p>检查如果是PIE instance, 就修改PIERemapPrefix来加载这份world拷贝, 而不是直接加载PIE world.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NewWorld = UWorld::DuplicateWorldForPIE(SourceWorldPackage, <span class="literal">nullptr</span>);</span><br><span class="line">NewWorld-&gt;StreamingLevelsPrefix = UWorld::BuildPIEPackagePrefix(WorldContext.PIEInstance);</span><br></pre></td></tr></table></figure></li><li><p>如果是minimal net rpc world则创建<code>UGameInstance::CreateMinimalNetRPCWorld(*URL.Map, WorldPackage, NewWorld);</code></p></li><li><p>常规地图加载</p><ol><li><p>设置world type<code>UWorld::WorldTypePreLoadMap.FindOrAdd( URLMapFName ) = WorldContext.WorldType;</code> <a href="https://docs.unrealengine.com/en-US/API/Runtime/Engine/Engine/UWorld/WorldTypePreLoadMap/index.html" target="_blank" rel="noopener">WorldTypePreLoadMap | Unreal Engine Documentation</a></p></li><li><p>检查level是否已经在内存中<code>WorldPackage = FindPackage(nullptr, *URL.Map);</code></p></li><li><p>如果level不在地图中, 则从磁盘进行加载<code>WorldPackage = LoadPackage(nullptr, *URL.Map, (WorldContext.WorldType == EWorldType::PIE ? LOAD_PackageForPIE : LOAD_None));</code></p></li><li><p>PostLoad执行完毕后, 清理world type list.<code>UWorld::WorldTypePreLoadMap.Remove( URLMapFName );</code></p></li><li><p>拿到加载完的world<code>NewWorld = UWorld::FindWorldInPackage(WorldPackage);</code></p></li><li><p>persistent level初始化<code>NewWorld-&gt;PersistentLevel-&gt;HandleLegacyMapBuildData();</code></p></li><li><p>如果是world type是PIE, 尝试复制一份PIE world<code>NewWorld = CreatePIEWorldByDuplication(WorldContext, NewWorld, URL.Map);</code>. <code>NewWorld = CreatePIEWorldByLoadingFromPackage(WorldContext, URL.Map, WorldPackage);</code></p></li><li><p>设置world的context</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NewWorld-&gt;SetGameInstance(WorldContext.OwningGameInstance);</span><br><span class="line">GWorld = NewWorld;</span><br><span class="line">WorldContext.SetCurrentWorld(NewWorld);</span><br><span class="line">WorldContext.World()-&gt;WorldType = WorldContext.WorldType;</span><br></pre></td></tr></table></figure></li><li><p>如果不是PIE, 将world加入root节点<code>WorldContext.World()-&gt;AddToRoot();</code>, 并进行world初始化<code>WorldContext.World()-&gt;InitWorld();</code></p></li><li><p>将PendingNetGame中的NetDriver对象赋值给新的world的NetDriver<code>MovePendingLevel(WorldContext);</code></p></li><li><p>设置game mode<code>WorldContext.World()-&gt;SetGameMode(URL);</code> <a href="https://docs.unrealengine.com/zh-CN/InteractiveExperiences/Framework/GameMode/index.html" target="_blank" rel="noopener">Game Mode 和 Game State | Unreal Engine Documentation</a></p></li><li><p>audio device 初始化<code>AudioDevice-&gt;SetDefaultBaseSoundMix(WorldContext.World()-&gt;GetWorldSettings()-&gt;DefaultBaseSoundMix);</code></p></li><li><p>监听客户端<code>WorldContext.World()-&gt;Listen(URL)</code></p></li><li><p>处理异步完成的shader map, 并将其分配到对应的材质上<code>GShaderCompilingManager-&gt;ProcessAsyncResults(false, true);</code></p></li><li><p>加载需要fully load的package<code>LoadPackagesFully(WorldContext.World(), FULLYLOAD_Map, WorldContext.World()-&gt;PersistentLevel-&gt;GetOutermost()-&gt;GetName());</code></p></li><li><p>确保”always loaded”子关卡已经全部加载完毕<code>WorldContext.World()-&gt;FlushLevelStreaming(EFlushLevelStreamingType::Visibility);</code></p></li><li><p>在source level 完成创建后复制动态level<code>WorldContext.World()-&gt;DuplicateRequestedLevels(FName(*URL.Map));</code></p></li><li><p>初始化AI system<code>WorldContext.World()-&gt;CreateAISystem();</code></p></li><li><p>初始化level中的gameplay<code>WorldContext.World()-&gt;InitializeActorsForPlay(URL, true, &amp;Context);</code></p></li><li><p>初始化navigation system<code>FNavigationSystem::AddNavigationSystemToWorld(*WorldContext.World(), FNavigationSystemRunMode::GameMode);</code></p></li><li><p>为所有的local players创建player actor<code>(*It)-&gt;SpawnPlayActor(URL.ToString(1),Error2,WorldContext.World())</code></p></li><li><p>通知stream manager开始texture streaming<code>IStreamingManager::Get().NotifyLevelChange();</code></p></li><li><p>XRsystem初始化<code>GEngine-&gt;XRSystem-&gt;OnBeginPlay(WorldContext);</code>  <a href="https://docs.unrealengine.com/en-US/API/Runtime/Engine/Engine/UEngine/XRSystem/index.html" target="_blank" rel="noopener">XRSystem | Unreal Engine Documentation</a></p></li></ol></li><li><p>开始game play<code>WorldContext.World()-&gt;BeginPlay();</code></p></li><li><p>发送回调信息<code>PostLoadMapCaller.Broadcast(WorldContext.World());</code></p></li><li><p>更新stream<code>RedrawViewports(false);</code></p></li><li><p>从streaming manager中移除所有streaming views <code>IStreamingManager::Get().RemoveStreamingViews( RemoveStreamingViews_All );</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;LoadMap&quot;&gt;&lt;a href=&quot;#LoadMap&quot; class=&quot;headerlink&quot; title=&quot;LoadMap&quot;&gt;&lt;/a&gt;LoadMap&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Unreal" scheme="//reckful.studio/categories/Unreal/"/>
    
    
  </entry>
  
  <entry>
    <title>C++ 12 - polymorphic class copy</title>
    <link href="//reckful.studio/2021/01/29/C++/C++%2012%20-%20polymorphic%20class%20copy/"/>
    <id>//reckful.studio/2021/01/29/C++/C++%2012%20-%20polymorphic%20class%20copy/</id>
    <published>2021-01-29T11:04:38.000Z</published>
    <updated>2021-12-20T07:07:18.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="polymorphic-class-copy"><a href="#polymorphic-class-copy" class="headerlink" title="polymorphic class copy"></a>polymorphic class copy</h1><a id="more"></a><p>多态类指存在至少一个虚函数继承关系的类. 当使用多态类的基类发生值拷贝时, 其隐式生成的拷贝构造函数和赋值运算符会导致一个问题: 派生类中只有基类部分被拷贝.</p><p>Example:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span> <span class="comment">// BAD: polymorphic base class doesn’t suppress copying</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">m</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ‘B’; &#125;</span><br><span class="line">    <span class="comment">// … nothing about copy operations, so uses default …</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span> <span class="keyword">public</span> B &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">m</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> ‘D’; &#125;</span><br><span class="line">    <span class="comment">// …</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(B&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> b2 = b; <span class="comment">// oops, slices the object; b2.m() will return ‘B’</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">D d;</span><br><span class="line">f(d);</span><br></pre></td></tr></table></figure><p>解决方法:</p><ol><li>实现virtual copy方法</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> owner&lt;B*&gt; <span class="title">clone</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~B() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    B(<span class="keyword">const</span> B&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    B&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> B&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span> <span class="keyword">public</span> B &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">owner&lt;D*&gt; <span class="title">clone</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line">    ~D() <span class="keyword">override</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>delete基类的拷贝构造函数和赋值运算符, 在编译器报错:</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span> <span class="comment">// GOOD: polymorphic class suppresses copying</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B(<span class="keyword">const</span> B&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    B&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> B&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">m</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ‘B’; &#125;</span><br><span class="line">    <span class="comment">// …</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span> <span class="keyword">public</span> B &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">m</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> ‘D’; &#125;</span><br><span class="line">    <span class="comment">// …</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(B&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> b2 = b; <span class="comment">// ok, compiler will detect inadvertent copying, and protest</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">D d;</span><br><span class="line">f(d);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;polymorphic-class-copy&quot;&gt;&lt;a href=&quot;#polymorphic-class-copy&quot; class=&quot;headerlink&quot; title=&quot;polymorphic class copy&quot;&gt;&lt;/a&gt;polymorphic class copy&lt;/h1&gt;
    
    </summary>
    
    
      <category term="C++" scheme="//reckful.studio/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>C++ 11 - singleton</title>
    <link href="//reckful.studio/2020/12/31/C++/C++%2011%20-%20singleton/"/>
    <id>//reckful.studio/2020/12/31/C++/C++%2011%20-%20singleton/</id>
    <published>2020-12-31T16:32:14.000Z</published>
    <updated>2021-12-20T07:07:18.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="singleton"><a href="#singleton" class="headerlink" title="singleton"></a>singleton</h1><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// T must be: no-throw default constructible and no-throw destructible</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">object_creator</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="comment">// This constructor does nothing more than ensure that instance()</span></span><br><span class="line">        <span class="comment">//  is called before main() begins, thus creating the static</span></span><br><span class="line">        <span class="comment">//  T object before multithreading race issues can come up.</span></span><br><span class="line">        object_creator() &#123; Singleton&lt;T&gt;::GetInst(); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">do_nothing</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">static</span> object_creator create_object;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    ~Singleton() = <span class="keyword">default</span>;</span><br><span class="line">    Singleton() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Singleton(<span class="keyword">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    Singleton&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// If, at any point (in user code), Singleton&lt;T&gt;::instance()</span></span><br><span class="line">    <span class="comment">//  is called, then the following function is instantiated.</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> T&amp; <span class="title">GetInst</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// This is the object that we return a reference to.</span></span><br><span class="line">        <span class="comment">// It is guaranteed to be created before main() begins because of</span></span><br><span class="line">        <span class="comment">//  the next line.</span></span><br><span class="line">        <span class="keyword">static</span> T obj;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The following line does nothing else than force the instantiation</span></span><br><span class="line">        <span class="comment">//  of Singleton&lt;T&gt;::create_object, whose constructor is</span></span><br><span class="line">        <span class="comment">//  called before main() begins.</span></span><br><span class="line">        create_object.do_nothing();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> Singleton&lt;T&gt;::object_creator Singleton&lt;T&gt;::create_object;</span><br></pre></td></tr></table></figure><ul><li>删除拷贝构造函数和赋值运算符, 隐藏构造函数, 约束实例唯一.</li><li>单例模板添加<code>do_nothing</code>函数调用, 保证单例实例构造调用在main调用之前.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;singleton&quot;&gt;&lt;a href=&quot;#singleton&quot; class=&quot;headerlink&quot; title=&quot;singleton&quot;&gt;&lt;/a&gt;singleton&lt;/h1&gt;
    
    </summary>
    
    
      <category term="C++" scheme="//reckful.studio/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>C++ 10 - defer</title>
    <link href="//reckful.studio/2020/12/25/C++/C++%2010%20-%20defer/"/>
    <id>//reckful.studio/2020/12/25/C++/C++%2010%20-%20defer/</id>
    <published>2020-12-25T20:54:47.000Z</published>
    <updated>2021-12-20T07:07:18.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h1><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoSomeThingWhenExit</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">DoSomeThingWhenExit</span><span class="params">(<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>()&gt; call_back_func)</span> : <span class="title">on_exit_callback</span><span class="params">(<span class="built_in">std</span>::move(call_back_func))</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    ~DoSomeThingWhenExit() &#123; on_exit_callback(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>()&gt; on_exit_callback;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GUARD_LINENAME_CAT(name, <span class="meta-keyword">line</span>) name##<span class="meta-keyword">line</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GUARD_LINENAME(name, <span class="meta-keyword">line</span>) GUARD_LINENAME_CAT(name, <span class="meta-keyword">line</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DO_EXIT(callback) DoSomeThingWhenExit GUARD_LINENAME(EXIT, __LINE__)(callback)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Replacement:</span></span><br><span class="line">    <span class="comment">// DoSomeThingWhenExit EXIT23([&amp;]()</span></span><br><span class="line">    <span class="comment">//                           &#123;</span></span><br><span class="line">    <span class="comment">//                               std::cout &lt;&lt; 1 &lt;&lt; std::endl;</span></span><br><span class="line">    <span class="comment">//                           &#125;)</span></span><br><span class="line">    DO_EXIT([&amp;]()&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    DO_EXIT([&amp;]()&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现方式: </p><ol><li>传递函数闭包到类实例, 退出作用域时析构实现. </li><li>通过行号声明不同变量, 实现单作用域多defer.</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;defer&quot;&gt;&lt;a href=&quot;#defer&quot; class=&quot;headerlink&quot; title=&quot;defer&quot;&gt;&lt;/a&gt;defer&lt;/h1&gt;
    
    </summary>
    
    
      <category term="C++" scheme="//reckful.studio/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>C++ 09 - 函数模板特化</title>
    <link href="//reckful.studio/2020/12/24/C++/C++%2009%20-%20%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E7%89%B9%E5%8C%96/"/>
    <id>//reckful.studio/2020/12/24/C++/C++%2009%20-%20%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E7%89%B9%E5%8C%96/</id>
    <published>2020-12-24T22:18:45.000Z</published>
    <updated>2021-12-20T07:07:18.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数模板特化"><a href="#函数模板特化" class="headerlink" title="函数模板特化"></a>函数模板特化</h1><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T t)</span> </span>&#123; <span class="comment">// 主模板 A</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T* t)</span> </span>&#123; <span class="comment">// 主模板 B, 重载了A</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="keyword">void</span> f&lt;<span class="keyword">int</span>*&gt;(<span class="keyword">int</span>* t) &#123; <span class="comment">// C, 对B的显式特化</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    f(&amp;a);</span><br><span class="line">true  <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重载决议无视特化的存在, 只在主函数模板之间进行决议.</strong> 而模板特化部参加重载, 所以函数的调用只会在第一个和第二个之间选择. 如果你想保证完全类型匹配的函数能被正确使用, 应该写一个重载的<strong>普通函数</strong>, 而不是函数模板特化.</p><p>函数模板是不允许偏特化的，下面的声明会编译错：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="title">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">f</span>()&#123;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">f</span>&lt;int, T2&gt;()&#123;</span>&#125;</span><br></pre></td></tr></table></figure><p>但函数允许重载，声明另一个函数模板即可替代偏特化的需要：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">f</span>()&#123;</span>&#125;              <span class="comment">// 注意：这里没有”模板实参”</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;函数模板特化&quot;&gt;&lt;a href=&quot;#函数模板特化&quot; class=&quot;headerlink&quot; title=&quot;函数模板特化&quot;&gt;&lt;/a&gt;函数模板特化&lt;/h1&gt;
    
    </summary>
    
    
      <category term="C++" scheme="//reckful.studio/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>ACMSGURU 355 - Numbers Painting</title>
    <link href="//reckful.studio/2020/12/17/ACMSGURU/ACMSGURU%20355%20-%20Numbers%20Painting/"/>
    <id>//reckful.studio/2020/12/17/ACMSGURU/ACMSGURU%20355%20-%20Numbers%20Painting/</id>
    <published>2020-12-17T11:33:31.000Z</published>
    <updated>2021-12-20T07:07:18.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Numbers-Painting"><a href="#Numbers-Painting" class="headerlink" title="Numbers Painting"></a>Numbers Painting</h1><a id="more"></a><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>Dr. Vasechkin wants to paint all numbers from 1 to N in such a way that if number A is divisible by number B, numbers A and B have different colors.</p><p>Help Dr. Vasechkin to find such a painting, where the number of the colors used is minimal.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The input contains integer number N (<img src="https://espresso.codeforces.com/8fec68e0b1e065e37b2bf8fff6f989e3eda3f5b3.png" alt>)).</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Write the number of the colors M in the desired painting in the first line of the output. In the second line of the output write the desired painting of numbers from 1 to N. The used colors should be represented by numbers from 1 to M. If there are several solutions, choose any of them.</p><h3 id="Example-s"><a href="#Example-s" class="headerlink" title="Example(s)"></a>Example(s)</h3><table><thead><tr><th>sample input</th><th>sample output</th></tr></thead><tbody><tr><td>12</td><td>4<br>1 2 2 3 2 3 2 4 3 3 2 4</td></tr></tbody></table><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">nums</span><span class="params">(n + <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> max_num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> num = i;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j * j &lt;= num; j++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(num % j == <span class="number">0</span>) &#123;</span><br><span class="line">                cnt += <span class="number">1</span>;</span><br><span class="line">                num /= j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[i] += cnt;</span><br><span class="line">        nums[i] += num &gt; <span class="number">1</span>;</span><br><span class="line">        max_num = <span class="built_in">std</span>::max(max_num, nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; max_num &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; nums[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Numbers-Painting&quot;&gt;&lt;a href=&quot;#Numbers-Painting&quot; class=&quot;headerlink&quot; title=&quot;Numbers Painting&quot;&gt;&lt;/a&gt;Numbers Painting&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ACMSGURU" scheme="//reckful.studio/categories/ACMSGURU/"/>
    
    
  </entry>
  
  <entry>
    <title>ACMSGURU 507 - Treediff</title>
    <link href="//reckful.studio/2020/11/18/ACMSGURU/ACMSGURU%20507%20-%20Treediff/"/>
    <id>//reckful.studio/2020/11/18/ACMSGURU/ACMSGURU%20507%20-%20Treediff/</id>
    <published>2020-11-18T10:43:31.000Z</published>
    <updated>2021-12-20T07:07:18.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Treediff"><a href="#Treediff" class="headerlink" title="Treediff"></a>Treediff</h1><a id="more"></a><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>Andrew has just made a breakthrough in complexity theory: he thinks that he can prove P=NP if he can get a data structure which allows to perform the following operation quickly. Naturally, you should help him complete his brilliant research. Consider a rooted tree with integers written in the leaves. For each internal (non-leaf) node v of the tree you must compute the minimum absolute difference between all pairs of numbers written in the leaves of the subtree rooted at v.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line of the input file contains two integers n and m — overall number of nodes in the tree and number of leaves in the tree respectively. <img src="https://espresso.codeforces.com/e969819d22422c7ba2a9a9664d60c3a425d6cdc5.png" alt>. All nodes are numbered from 1 to n. Node number 1 is always the root of the tree. Each of the other nodes has a unique parent in the tree. Each of the next n - 1 lines of the input file contains one integer — the number of the parent node for nodes 2, 3,…, n respectively. Each of the last m lines of the input file contains one integer ranging from <img src="https://espresso.codeforces.com/8956ddde38feeac9a82239162072525d790b1870.png" alt> to <img src="https://espresso.codeforces.com/4d18431e5cbe3d02088d40704fae7e3d35398fb3.png" alt> — the value of the corresponding leaf. Leaves of the tree have numbers from n - m + 1 to n.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Output one line with n - m integers: for each internal node of the tree output the minimum absolute difference between pairs of values written in the leaves of its subtree. If there is only one leaf in the subtree of some internal node, output number 231 - 1 for that node. Output the answers for the nodes in order from node number 1 to n - m.</p><h3 id="Example-s"><a href="#Example-s" class="headerlink" title="Example(s)"></a>Example(s)</h3><table><thead><tr><th>sample input</th><th>sample output</th></tr></thead><tbody><tr><td>5 4<br>1<br>1<br>1<br>1<br>1<br>4<br>7<br>9<br></td><td>2</td></tr></tbody></table><table><thead><tr><th>sample input</th><th>sample output</th></tr></thead><tbody><tr><td>5 4<br>1<br>1<br>1<br>1<br>1<br>4<br>7<br>10</td><td>3</td></tr></tbody></table><table><thead><tr><th>sample input</th><th>sample output</th></tr></thead><tbody><tr><td>7 4<br>1<br>2<br>1<br>2<br>3<br>3<br>2 <br>10<br>7<br>15</td><td>3 3 8</td></tr></tbody></table><table><thead><tr><th>sample input</th><th>sample output</th></tr></thead><tbody><tr><td>2 1<br>1<br>100</td><td>2147483647</td></tr></tbody></table><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int int64_t</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">sons_index</span><span class="params">(n + <span class="number">1</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;&#125;)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">sons_value</span><span class="params">(n + <span class="number">1</span>, <span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>, <span class="built_in">std</span>::less&lt;<span class="keyword">int</span>&gt;&gt;&#123;&#125;)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">values</span><span class="params">(n + <span class="number">1</span>, INT_MAX)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> current_father;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; current_father;</span><br><span class="line">        sons_index[current_father].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - m + <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> value;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; value;</span><br><span class="line">        sons_value[i].insert(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> dfs = <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>)&gt;&#123;&#125;;</span><br><span class="line">    dfs = [&amp;](<span class="keyword">int</span> index) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; son_index : sons_index[index]) &#123;</span><br><span class="line">            dfs(son_index);</span><br><span class="line"></span><br><span class="line">            values[index] = <span class="built_in">std</span>::min(values[index], values[son_index]);</span><br><span class="line">            <span class="keyword">if</span>(sons_value[son_index].size() &gt; sons_value[index].size()) &#123;</span><br><span class="line">                <span class="built_in">std</span>::swap(sons_value[son_index], sons_value[index]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> it = sons_value[son_index].begin(); it != sons_value[son_index].end(); it++) &#123;</span><br><span class="line">                <span class="keyword">auto</span> pre = sons_value[index].lower_bound(*it);</span><br><span class="line">                <span class="keyword">auto</span> suc = pre;</span><br><span class="line">                <span class="keyword">if</span>(pre != sons_value[index].begin()) &#123;</span><br><span class="line">                    pre--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(pre != sons_value[index].end()) &#123;</span><br><span class="line">                    values[index] = <span class="built_in">std</span>::min(values[index], <span class="built_in">std</span>::<span class="built_in">abs</span>(*it - *pre));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(suc != sons_value[index].end()) &#123;</span><br><span class="line">                    values[index] = <span class="built_in">std</span>::min(values[index], <span class="built_in">std</span>::<span class="built_in">abs</span>(*it - *suc));</span><br><span class="line">                &#125;</span><br><span class="line">                sons_value[index].insert(*it);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!sons_index[i].empty()) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; values[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Treediff&quot;&gt;&lt;a href=&quot;#Treediff&quot; class=&quot;headerlink&quot; title=&quot;Treediff&quot;&gt;&lt;/a&gt;Treediff&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ACMSGURU" scheme="//reckful.studio/categories/ACMSGURU/"/>
    
    
  </entry>
  
  <entry>
    <title>ACMSGURU 130 - Circle</title>
    <link href="//reckful.studio/2020/09/23/ACMSGURU/ACMSGURU%20130%20-%20Circle/"/>
    <id>//reckful.studio/2020/09/23/ACMSGURU/ACMSGURU%20130%20-%20Circle/</id>
    <published>2020-09-23T14:19:21.000Z</published>
    <updated>2021-12-20T07:07:18.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Circle"><a href="#Circle" class="headerlink" title="Circle"></a>Circle</h1><a id="more"></a><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>On a circle border there are 2k different points A1, A2, …, A2k, located contiguously. These points connect k chords so that each of points A1, A2, …, A2k is the end point of one chord. Chords divide the circle into parts. You have to find N - the number of different ways to connect the points so that the circle is broken into minimal possible amount of parts P.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line contains the integer k (1 &lt;= k &lt;= 30).</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>The first line should contain two numbers N and P delimited by space.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>2</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>2 3</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    std::vector&lt;unsigned long long&gt; dp(35, 0);</span></span><br><span class="line"><span class="comment">//    dp[1] = 1;</span></span><br><span class="line"><span class="comment">//    dp[2] = 2 * dp[1] * dp[1];</span></span><br><span class="line"><span class="comment">//    for(int i = 3; i &lt;= 30; i++) &#123;</span></span><br><span class="line"><span class="comment">//        dp[i] += 2 * dp[1] * dp[i - 1];</span></span><br><span class="line"><span class="comment">//        for(int j = 1; j &lt;= i - 1; j++) &#123;</span></span><br><span class="line"><span class="comment">//            dp[i] += dp[1] * dp[j] * dp[i - 1 - j];</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    for(int i = 1; i &lt;= 30; i++) &#123;</span></span><br><span class="line"><span class="comment">//        std::cout &lt;&lt; i &lt;&lt; " " &lt;&lt; dp[i] &lt;&lt; std::endl;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; dp &#123;</span><br><span class="line">        <span class="string">"0"</span>,</span><br><span class="line">        <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"2"</span>,</span><br><span class="line">        <span class="string">"5"</span>,</span><br><span class="line">        <span class="string">"14"</span>,</span><br><span class="line">        <span class="string">"42"</span>,</span><br><span class="line">        <span class="string">"132"</span>,</span><br><span class="line">        <span class="string">"429"</span>,</span><br><span class="line">        <span class="string">"1430"</span>,</span><br><span class="line">        <span class="string">"4862"</span>,</span><br><span class="line">        <span class="string">"16796"</span>,</span><br><span class="line">        <span class="string">"58786"</span>,</span><br><span class="line">        <span class="string">"208012"</span>,</span><br><span class="line">        <span class="string">"742900"</span>,</span><br><span class="line">        <span class="string">"2674440"</span>,</span><br><span class="line">        <span class="string">"9694845"</span>,</span><br><span class="line">        <span class="string">"35357670"</span>,</span><br><span class="line">        <span class="string">"129644790"</span>,</span><br><span class="line">        <span class="string">"477638700"</span>,</span><br><span class="line">        <span class="string">"1767263190"</span>,</span><br><span class="line">        <span class="string">"6564120420"</span>,</span><br><span class="line">        <span class="string">"24466267020"</span>,</span><br><span class="line">        <span class="string">"91482563640"</span>,</span><br><span class="line">        <span class="string">"343059613650"</span>,</span><br><span class="line">        <span class="string">"1289904147324"</span>,</span><br><span class="line">        <span class="string">"4861946401452"</span>,</span><br><span class="line">        <span class="string">"18367353072152"</span>,</span><br><span class="line">        <span class="string">"69533550916004"</span>,</span><br><span class="line">        <span class="string">"263747951750360"</span>,</span><br><span class="line">        <span class="string">"1002242216651368"</span>,</span><br><span class="line">        <span class="string">"3814986502092304"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; dp[k] &lt;&lt; <span class="string">" "</span> &lt;&lt; k + <span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Circle&quot;&gt;&lt;a href=&quot;#Circle&quot; class=&quot;headerlink&quot; title=&quot;Circle&quot;&gt;&lt;/a&gt;Circle&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ACMSGURU" scheme="//reckful.studio/categories/ACMSGURU/"/>
    
    
  </entry>
  
  <entry>
    <title>ACMSGURU 106 - The equation</title>
    <link href="//reckful.studio/2020/06/28/ACMSGURU/ACMSGURU%20106%20-%20The%20equation/"/>
    <id>//reckful.studio/2020/06/28/ACMSGURU/ACMSGURU%20106%20-%20The%20equation/</id>
    <published>2020-06-28T22:25:42.000Z</published>
    <updated>2021-12-20T07:07:18.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="The-equation"><a href="#The-equation" class="headerlink" title="The equation"></a>The equation</h1><a id="more"></a><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>There is an equation ax + by + c = 0. Given a,b,c,x1,x2,y1,y2 you must determine, how many integer roots of this equation are satisfy to the following conditions : x1&lt;=x&lt;=x2,   y1&lt;=y&lt;=y2. Integer root of this equation is a pair of integer numbers (x,y).</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>Input contains integer numbers a,b,c,x1,x2,y1,y2 delimited by spaces and line breaks. All numbers are not greater than 108 by absolute value.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Write answer to the output.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 1 -3</span><br><span class="line">0 4</span><br><span class="line">0 4</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::function&lt;<span class="function"><span class="keyword">long</span> <span class="title">long</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&amp;, <span class="keyword">long</span> <span class="keyword">long</span>&amp;)</span>&gt; ext_gcd</span>;</span><br><span class="line">    ext_gcd = [&amp;ext_gcd](<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span>&amp; x, <span class="keyword">long</span> <span class="keyword">long</span>&amp; y) -&gt; <span class="keyword">long</span> <span class="keyword">long</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> d = a;</span><br><span class="line">        <span class="keyword">if</span>(b != <span class="number">0</span>) &#123;</span><br><span class="line">            d = ext_gcd(b, a % b, y, x);</span><br><span class="line">            y -= (a / b) * x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            x = <span class="number">1</span>;</span><br><span class="line">            y = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a, b, c;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x1, x2;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> y1, y2;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x1 &gt;&gt; x2;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; y1 &gt;&gt; y2;</span><br><span class="line"></span><br><span class="line">    c = -c;</span><br><span class="line">    <span class="keyword">if</span> (c &lt; <span class="number">0</span>) &#123;</span><br><span class="line">       c = -c;</span><br><span class="line">       a = -a;</span><br><span class="line">       b = -b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        a = -a;</span><br><span class="line">        <span class="keyword">auto</span> tmp = x1;</span><br><span class="line">        x1 = -x2;</span><br><span class="line">        x2 = -tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        b = -b;</span><br><span class="line">        <span class="keyword">auto</span> tmp = y1;</span><br><span class="line">        y1 = -y2;</span><br><span class="line">        y2 = -tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span>) &#123;</span><br><span class="line">        res = c == <span class="number">0</span> ? (x2 - x1 + <span class="number">1</span>) * (y2 - y1 + <span class="number">1</span>) : <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">0</span> &amp;&amp; b != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> tmp_y = c / b;</span><br><span class="line">        res = (c % b == <span class="number">0</span> &amp;&amp; tmp_y &gt;= y1 &amp;&amp; tmp_y &lt;= y2) ? (x2 - x1 + <span class="number">1</span>) : <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a != <span class="number">0</span> &amp;&amp; b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> tmp_x = c / a;</span><br><span class="line">        res = (c % a == <span class="number">0</span> &amp;&amp; tmp_x &gt;= x1 &amp;&amp; tmp_x &lt;= x2) ? (y2 - y1 + <span class="number">1</span>) : <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x, y;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> gcd = ext_gcd(a, b, x, y);</span><br><span class="line">        <span class="keyword">if</span>(c % gcd != <span class="number">0</span>) &#123;</span><br><span class="line">            res = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> kx, ky;</span><br><span class="line">            x *= c / gcd;</span><br><span class="line">            y *= c / gcd;</span><br><span class="line">            kx = b / gcd;</span><br><span class="line">            ky = -a / gcd;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> left = <span class="built_in">std</span>::max(<span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="number">1.0</span> * (x1 - x) / kx) , <span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="number">1.0</span> * (y2 - y) / ky));</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> right = <span class="built_in">std</span>::min(<span class="built_in">std</span>::<span class="built_in">floor</span>(<span class="number">1.0</span> * (x2 - x) / kx), <span class="built_in">std</span>::<span class="built_in">floor</span>(<span class="number">1.0</span> * (y1 - y) / ky));</span><br><span class="line">            res = left &gt; right ? <span class="number">0</span> : <span class="built_in">std</span>::max(<span class="number">0L</span>L, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1 1 -3</span></span><br><span class="line"><span class="comment">//0 4</span></span><br><span class="line"><span class="comment">//0 4</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;The-equation&quot;&gt;&lt;a href=&quot;#The-equation&quot; class=&quot;headerlink&quot; title=&quot;The equation&quot;&gt;&lt;/a&gt;The equation&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ACMSGURU" scheme="//reckful.studio/categories/ACMSGURU/"/>
    
    
  </entry>
  
  <entry>
    <title>ACMSGURU 118 - Digital Root</title>
    <link href="//reckful.studio/2020/01/29/ACMSGURU/ACMSGURU%20118%20-%20Digital%20Root/"/>
    <id>//reckful.studio/2020/01/29/ACMSGURU/ACMSGURU%20118%20-%20Digital%20Root/</id>
    <published>2020-01-29T14:42:33.000Z</published>
    <updated>2021-12-20T07:07:18.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Digital-Root"><a href="#Digital-Root" class="headerlink" title="Digital Root"></a>Digital Root</h1><a id="more"></a><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>Let f(n) be a sum of digits for positive integer n. If f(n) is one-digit number then it is a digital root for n and otherwise digital root of n is equal to digital root of f(n). For example, digital root of 987 is 6. Your task is to find digital root for expression <code>A1*A2*...*AN + A1*A2*...*AN-1 + ... + A1*A2 + A1</code>.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>Input file consists of few test cases. There is K (1&lt;=K&lt;=5) in the first line of input. Each test case is a line. Positive integer number N is written on the first place of test case (N&lt;=1000). After it there are N positive integer numbers (sequence A). Each of this numbers is non-negative and not more than 109.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Write one line for every test case. On each line write digital root for given expression.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3 2 3 4</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 9999</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLEN 4</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigNum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10000</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BigNum()&#123; len = <span class="number">1</span>;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a)); &#125;</span><br><span class="line">    BigNum(<span class="keyword">const</span> <span class="keyword">int</span>);</span><br><span class="line">    BigNum(<span class="keyword">const</span> <span class="keyword">char</span>*);</span><br><span class="line">    BigNum(<span class="keyword">const</span> BigNum &amp;);</span><br><span class="line">    BigNum &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> BigNum &amp;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="built_in">std</span>::istream&amp; <span class="keyword">operator</span>&gt;&gt;(<span class="built_in">std</span>::istream&amp;,  BigNum&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="built_in">std</span>::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="built_in">std</span>::ostream&amp;,  BigNum&amp;);</span><br><span class="line"></span><br><span class="line">    BigNum <span class="keyword">operator</span>+(<span class="keyword">const</span> BigNum &amp;) <span class="keyword">const</span>;</span><br><span class="line">    BigNum <span class="keyword">operator</span>-(<span class="keyword">const</span> BigNum &amp;) <span class="keyword">const</span>;</span><br><span class="line">    BigNum <span class="keyword">operator</span>*(<span class="keyword">const</span> BigNum &amp;) <span class="keyword">const</span>;</span><br><span class="line">    BigNum <span class="keyword">operator</span>/(<span class="keyword">const</span> <span class="keyword">int</span>   &amp;) <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line">    BigNum <span class="keyword">operator</span>^(<span class="keyword">const</span> <span class="keyword">int</span>  &amp;) <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">int</span>    <span class="keyword">operator</span>%(<span class="keyword">const</span> <span class="keyword">int</span>  &amp;) <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">bool</span>   <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> BigNum &amp; T)<span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">bool</span>   <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> <span class="keyword">int</span> &amp; t)<span class="keyword">const</span>;</span><br><span class="line">&#125;;</span><br><span class="line">BigNum::BigNum(<span class="keyword">const</span> <span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> c,d = b;</span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="keyword">while</span>(d &gt; MAXN)</span><br><span class="line">    &#123;</span><br><span class="line">        c = d - (d / (MAXN + <span class="number">1</span>)) * (MAXN + <span class="number">1</span>);</span><br><span class="line">        d = d / (MAXN + <span class="number">1</span>);</span><br><span class="line">        a[len++] = c;</span><br><span class="line">    &#125;</span><br><span class="line">    a[len++] = d;</span><br><span class="line">&#125;</span><br><span class="line">BigNum::BigNum(<span class="keyword">const</span> <span class="keyword">char</span>*s)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> t,k,index,l,i;</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    l=<span class="built_in">strlen</span>(s);</span><br><span class="line">    len=l/DLEN;</span><br><span class="line">    <span class="keyword">if</span>(l%DLEN)</span><br><span class="line">        len++;</span><br><span class="line">    index=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=l<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i-=DLEN)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="number">0</span>;</span><br><span class="line">        k=i-DLEN+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;<span class="number">0</span>)</span><br><span class="line">            k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=k;j&lt;=i;j++)</span><br><span class="line">            t=t*<span class="number">10</span>+s[j]-<span class="string">'0'</span>;</span><br><span class="line">        a[index++]=t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">BigNum::BigNum(<span class="keyword">const</span> BigNum &amp; T) : len(T.len)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; len ; i++)</span><br><span class="line">        a[i] = T.a[i];</span><br><span class="line">&#125;</span><br><span class="line">BigNum &amp; BigNum::<span class="keyword">operator</span>=(<span class="keyword">const</span> BigNum &amp; n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    len = n.len;</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; len ; i++)</span><br><span class="line">        a[i] = n.a[i];</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::istream&amp; <span class="keyword">operator</span>&gt;&gt;(<span class="built_in">std</span>::istream &amp; in,  BigNum &amp; b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> ch[MAXSIZE*<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">-1</span>;</span><br><span class="line">    in&gt;&gt;ch;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="built_in">strlen</span>(ch);</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=l<span class="number">-1</span>;i&gt;=<span class="number">0</span>;)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>&amp;&amp;i&gt;=<span class="number">0</span>;j++,i--,t*=<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=(ch[i]-<span class="string">'0'</span>)*t;</span><br><span class="line">        &#125;</span><br><span class="line">        b.a[count]=sum;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    b.len =count++;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(<span class="built_in">std</span>::ostream&amp; out,  BigNum&amp; b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    out &lt;&lt; b.a[b.len - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i = b.len - <span class="number">2</span> ; i &gt;= <span class="number">0</span> ; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        out.width(DLEN);</span><br><span class="line">        out.fill(<span class="string">'0'</span>);</span><br><span class="line">        out &lt;&lt; b.a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigNum BigNum::<span class="keyword">operator</span>+(<span class="keyword">const</span> BigNum &amp; T) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">BigNum <span class="title">t</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> i,big;</span><br><span class="line">    big = T.len &gt; len ? T.len : len;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; big ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t.a[i] +=T.a[i];</span><br><span class="line">        <span class="keyword">if</span>(t.a[i] &gt; MAXN)</span><br><span class="line">        &#123;</span><br><span class="line">            t.a[i + <span class="number">1</span>]++;</span><br><span class="line">            t.a[i] -=MAXN+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t.a[big] != <span class="number">0</span>)</span><br><span class="line">        t.len = big + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        t.len = big;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">BigNum BigNum::<span class="keyword">operator</span>-(<span class="keyword">const</span> BigNum &amp; T) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,big;</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">    BigNum t1,t2;</span><br><span class="line">    <span class="keyword">if</span>(*<span class="keyword">this</span>&gt;T)</span><br><span class="line">    &#123;</span><br><span class="line">        t1=*<span class="keyword">this</span>;</span><br><span class="line">        t2=T;</span><br><span class="line">        flag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        t1=T;</span><br><span class="line">        t2=*<span class="keyword">this</span>;</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    big=t1.len;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; big ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t1.a[i] &lt; t2.a[i])</span><br><span class="line">        &#123;</span><br><span class="line">            j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(t1.a[j] == <span class="number">0</span>)</span><br><span class="line">                j++;</span><br><span class="line">            t1.a[j--]--;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; i)</span><br><span class="line">                t1.a[j--] += MAXN;</span><br><span class="line">            t1.a[i] += MAXN + <span class="number">1</span> - t2.a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            t1.a[i] -= t2.a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    t1.len = big;</span><br><span class="line">    <span class="keyword">while</span>(t1.a[t1.len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; t1.len &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t1.len--;</span><br><span class="line">        big--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">        t1.a[big<span class="number">-1</span>]=<span class="number">0</span>-t1.a[big<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> t1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigNum BigNum::<span class="keyword">operator</span>*(<span class="keyword">const</span> BigNum &amp; T) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    BigNum ret;</span><br><span class="line">    <span class="keyword">int</span> i,j,up;</span><br><span class="line">    <span class="keyword">int</span> temp,temp1;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; len ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        up = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span> ; j &lt; T.len ; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = a[i] * T.a[j] + ret.a[i + j] + up;</span><br><span class="line">            <span class="keyword">if</span>(temp &gt; MAXN)</span><br><span class="line">            &#123;</span><br><span class="line">                temp1 = temp - temp / (MAXN + <span class="number">1</span>) * (MAXN + <span class="number">1</span>);</span><br><span class="line">                up = temp / (MAXN + <span class="number">1</span>);</span><br><span class="line">                ret.a[i + j] = temp1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                up = <span class="number">0</span>;</span><br><span class="line">                ret.a[i + j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(up != <span class="number">0</span>)</span><br><span class="line">            ret.a[i + j] = up;</span><br><span class="line">    &#125;</span><br><span class="line">    ret.len = i + j;</span><br><span class="line">    <span class="keyword">while</span>(ret.a[ret.len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; ret.len &gt; <span class="number">1</span>)</span><br><span class="line">        ret.len--;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">BigNum BigNum::<span class="keyword">operator</span>/(<span class="keyword">const</span> <span class="keyword">int</span> &amp; b) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    BigNum ret;</span><br><span class="line">    <span class="keyword">int</span> i,down = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = len - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        ret.a[i] = (a[i] + down * (MAXN + <span class="number">1</span>)) / b;</span><br><span class="line">        down = a[i] + down * (MAXN + <span class="number">1</span>) - ret.a[i] * b;</span><br><span class="line">    &#125;</span><br><span class="line">    ret.len = len;</span><br><span class="line">    <span class="keyword">while</span>(ret.a[ret.len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; ret.len &gt; <span class="number">1</span>)</span><br><span class="line">        ret.len--;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> BigNum::<span class="keyword">operator</span> %(<span class="keyword">const</span> <span class="keyword">int</span> &amp; b) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i,d=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = len<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        d = ((d * (MAXN+<span class="number">1</span>))% b + a[i])% b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">BigNum BigNum::<span class="keyword">operator</span>^(<span class="keyword">const</span> <span class="keyword">int</span> &amp; n) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    BigNum t,ret(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">int</span> m=n;</span><br><span class="line">    <span class="keyword">while</span>(m&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t=*<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>( i=<span class="number">1</span>;i&lt;&lt;<span class="number">1</span>&lt;=m;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t=t*t;</span><br><span class="line">        &#125;</span><br><span class="line">        m-=i;</span><br><span class="line">        ret=ret*t;</span><br><span class="line">        <span class="keyword">if</span>(m==<span class="number">1</span>)</span><br><span class="line">            ret=ret*(*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> BigNum::<span class="keyword">operator</span>&gt;(<span class="keyword">const</span> BigNum &amp; T) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> ln;</span><br><span class="line">    <span class="keyword">if</span>(len &gt; T.len)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(len == T.len)</span><br><span class="line">    &#123;</span><br><span class="line">        ln = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(a[ln] == T.a[ln] &amp;&amp; ln &gt;= <span class="number">0</span>)</span><br><span class="line">            ln--;</span><br><span class="line">        <span class="keyword">if</span>(ln &gt;= <span class="number">0</span> &amp;&amp; a[ln] &gt; T.a[ln])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> BigNum::<span class="keyword">operator</span> &gt;(<span class="keyword">const</span> <span class="keyword">int</span> &amp; t) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">BigNum <span class="title">b</span><span class="params">(t)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(k--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        BigNum total_sum&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        BigNum prefix_sum&#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">            <span class="keyword">int</span> num;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">            prefix_sum = prefix_sum * BigNum&#123;num&#125;;</span><br><span class="line">            total_sum = total_sum + prefix_sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">stringstream</span> string_stream&#123;&#125;;</span><br><span class="line">        string_stream &lt;&lt; total_sum;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>.flush();</span><br><span class="line">        <span class="keyword">int</span> digit_sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> c : string_stream.str()) &#123;</span><br><span class="line">            digit_sum += c - <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">std</span>::<span class="built_in">log10</span>(digit_sum)) + <span class="number">1</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> new_sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(digit_sum != <span class="number">0</span>) &#123;</span><br><span class="line">                new_sum += digit_sum % <span class="number">10</span>;</span><br><span class="line">                digit_sum /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            digit_sum = new_sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; digit_sum &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Digital-Root&quot;&gt;&lt;a href=&quot;#Digital-Root&quot; class=&quot;headerlink&quot; title=&quot;Digital Root&quot;&gt;&lt;/a&gt;Digital Root&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ACMSGURU" scheme="//reckful.studio/categories/ACMSGURU/"/>
    
    
  </entry>
  
  <entry>
    <title>ACMSGURU 134 - Centroid</title>
    <link href="//reckful.studio/2020/01/24/ACMSGURU/ACMSGURU%20134%20-%20Centroid/"/>
    <id>//reckful.studio/2020/01/24/ACMSGURU/ACMSGURU%20134%20-%20Centroid/</id>
    <published>2020-01-24T19:41:39.000Z</published>
    <updated>2021-12-20T07:07:18.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Centroid"><a href="#Centroid" class="headerlink" title="Centroid"></a>Centroid</h1><a id="more"></a><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>You are given an undirected connected graph, with N vertices and N-1 edges (a tree). You must find the centroid(s) of the tree.<br>In order to define the centroid, some integer value will be assosciated to every vertex. Let’s consider the vertex k. If we remove the vertex k from the tree (along with its adjacent edges), the remaining graph will have only N-1 vertices and may be composed of more than one connected components. Each of these components is (obviously) a tree. The value associated to vertex k is the largest number of vertices contained by some connected component in the remaining graph, after the removal of vertex k. All the vertices for which the associated value is minimum are considered centroids.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line of the input contains the integer number N (1&lt;=N&lt;=16 000). The next N-1 lines will contain two integers, a and b, separated by blanks, meaning that there exists an edge between vertex a and vertex b.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>You should print two lines. The first line should contain the minimum value associated to the centroid(s) and the number of centroids. The second line should contain the list of vertices which are centroids, sorted in ascending order.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">2 4</span><br><span class="line">1 5</span><br><span class="line">5 6</span><br><span class="line">6 7</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    std::ios::sync_with_stdio(false);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; <span class="title">is_root</span><span class="params">(n + <span class="number">1</span>, <span class="literal">true</span>)</span></span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; tree&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        is_root[b] = <span class="literal">false</span>;</span><br><span class="line">        tree[a].push_back(b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tree.find(i) == tree.end()) &#123;</span><br><span class="line">            tree[i] = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> root_index = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(is_root[i]) &#123;</span><br><span class="line">            root_index = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">node_count</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">auto</span> dfs_count = <span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt;&#123;&#125;;</span><br><span class="line">    dfs_count = [&amp;dfs_count, &amp;node_count, &amp;tree](<span class="keyword">int</span> index) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(tree.find(index) == tree.end()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> next_index : tree[index]) &#123;</span><br><span class="line">            node_count[next_index] = dfs_count(next_index);</span><br><span class="line">            sum += node_count[next_index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node_count[index] = sum + <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    dfs_count(root_index);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">node_centroid</span><span class="params">(n + <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> centroid_value = INT_MAX;</span><br><span class="line">    <span class="keyword">auto</span> dfs_get_centroid = <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt;&#123;&#125;;</span><br><span class="line">    dfs_get_centroid = [&amp;dfs_get_centroid, &amp;node_count, &amp;node_centroid, &amp;centroid_value, &amp;tree, &amp;root_index](<span class="keyword">int</span> index, <span class="keyword">int</span> father_index) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(father_index != <span class="number">-1</span>) &#123;</span><br><span class="line">            node_centroid[index] = <span class="built_in">std</span>::max(node_centroid[index], node_count[root_index] - node_count[index]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> child_index : tree[index]) &#123;</span><br><span class="line">            node_centroid[index] = <span class="built_in">std</span>::max(node_centroid[index], node_count[child_index]);</span><br><span class="line">            dfs_get_centroid(child_index, index);</span><br><span class="line">        &#125;</span><br><span class="line">        centroid_value = <span class="built_in">std</span>::min(centroid_value, node_centroid[index]);</span><br><span class="line">    &#125;;</span><br><span class="line">    dfs_get_centroid(root_index, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(node_centroid[i] == centroid_value) &#123;</span><br><span class="line">            res.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::sort(res.begin(), res.end(), <span class="built_in">std</span>::less&lt;&gt;&#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; centroid_value &lt;&lt; <span class="string">" "</span> &lt;&lt; res.size() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> index : res) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; index &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Centroid&quot;&gt;&lt;a href=&quot;#Centroid&quot; class=&quot;headerlink&quot; title=&quot;Centroid&quot;&gt;&lt;/a&gt;Centroid&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ACMSGURU" scheme="//reckful.studio/categories/ACMSGURU/"/>
    
    
  </entry>
  
  <entry>
    <title>ACMSGURU 347 - Join the Strings</title>
    <link href="//reckful.studio/2020/01/09/ACMSGURU/ACMSGURU%20347%20-%20Join%20the%20Strings/"/>
    <id>//reckful.studio/2020/01/09/ACMSGURU/ACMSGURU%20347%20-%20Join%20the%20Strings/</id>
    <published>2020-01-09T16:33:35.000Z</published>
    <updated>2021-12-20T07:07:18.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Join-the-Strings"><a href="#Join-the-Strings" class="headerlink" title="Join the Strings"></a>Join the Strings</h1><a id="more"></a><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>His Royal Highness King of Berland Berl XV was a very wise man and had a very accomplished wife, who was aware of the fact, that prominent and outstanding personalities once having written down their names on the pages of glorious History, remain there forever. His Royal Highness King Berl XV experienced an intrinsic, lost nowadays, deep and sincere sense of respect and trust for his beloved spouse. So he decided to acquire a chronicler of his own. Due to the ambiguous nature of misunderstanding and the crying injustice of history to ambiguity, he decided to leave all his royal responsibilities aside and made up his royal mind to find the chronicler, who will make him famous, depicting all his heroic deeds truthfully and gloriously enough.</p><p>The King assembled the greatest minds of his kingdom at the Academic Chroniclers Meeting (ACM), as he named it, and decided to test their might. The task was to build the Smallest Lexicographical Concatenation (SLC) out of the given N strings. SLC of N strings s1,…, sN is the lexicographically smallest their concatenation si1 +… + siN, where i1,…, iN is a permutation of integers from 1 through N. It’s a great privilege to be a chronicler, so don’t miss your chance and don’t screw it up! Make the king choose you!</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line of the input file contains a single integer N (1 ≤ N ≤ 100) indicating the number of strings. The following N lines contain N strings, one string per line. The length of each string is no more than 100 characters. Each string consists only of lowercase Latin letters. There are no any leading or trailing spaces.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Print the SLC of the given N strings to the output file as a single line.</p><h2 id="Example-s"><a href="#Example-s" class="headerlink" title="Example(s)"></a>Example(s)</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>sample input</td><td>sample output</td></tr><tr><td>6<br>it<br>looks<br>like<br>an<br>easy<br>problem</td><td>aneasyitlikelooksproblem</td></tr></tbody></table><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; <span class="title">strings</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; strings[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::sort(strings.begin(), strings.end(), [](<span class="built_in">std</span>::<span class="built_in">string</span> a, <span class="built_in">std</span>::<span class="built_in">string</span> b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b &lt; b + a;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; <span class="built_in">string</span> : strings) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Join-the-Strings&quot;&gt;&lt;a href=&quot;#Join-the-Strings&quot; class=&quot;headerlink&quot; title=&quot;Join the Strings&quot;&gt;&lt;/a&gt;Join the Strings&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ACMSGURU" scheme="//reckful.studio/categories/ACMSGURU/"/>
    
    
  </entry>
  
  <entry>
    <title>ACMSGURU 104 - Little shop of flowers</title>
    <link href="//reckful.studio/2020/01/03/ACMSGURU/ACMSGURU%20104%20-%20Little%20shop%20of%20flowers/"/>
    <id>//reckful.studio/2020/01/03/ACMSGURU/ACMSGURU%20104%20-%20Little%20shop%20of%20flowers/</id>
    <published>2020-01-03T23:22:23.000Z</published>
    <updated>2021-12-20T07:07:18.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Little-shop-of-flowers"><a href="#Little-shop-of-flowers" class="headerlink" title="Little shop of flowers"></a>Little shop of flowers</h1><a id="more"></a><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>You want to arrange the window of your flower shop in a most pleasant way. You have F bunches of flowers, each being of a different kind, and at least as many vases ordered in a row. The vases are glued onto the shelf and are numbered consecutively 1 through V, where V is the number of vases, from left to right so that the vase 1 is the leftmost, and the vase V is the rightmost vase. The bunches are moveable and are uniquely identified by integers between 1 and F. These id-numbers have a significance: They determine the required order of appearance of the flower bunches in the row of vases so that the bunch i must be in a vase to the left of the vase containing bunch j whenever i &lt; j. Suppose, for example, you have bunch of azaleas (id-number=1), a bunch of begonias (id-number=2) and a bunch of carnations (id-number=3). Now, all the bunches must be put into the vases keeping their id-numbers in order. The bunch of azaleas must be in a vase to the left of begonias, and the bunch of begonias must be in a vase to the left of carnations. If there are more vases than bunches of flowers then the excess will be left empty. A vase can hold only one bunch of flowers.</p><p>Each vase has a distinct characteristic (just like flowers do). Hence, putting a bunch of flowers in a vase results in a certain aesthetic value, expressed by an integer. The aesthetic values are presented in a table as shown below. Leaving a vase empty has an aesthetic value of 0.</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td>V A S E S</td></tr><tr><td></td><td></td><td>1</td></tr><tr><td>Bunches</td><td>1 (azaleas)</td><td>7</td></tr><tr><td></td><td>2 (begonias)</td><td>5</td></tr><tr><td></td><td>3 (carnations)</td><td>-21</td></tr></tbody></table><p>According to the table, azaleas, for example, would look great in vase 2, but they would look awful in vase 4.</p><p>To achieve the most pleasant effect you have to maximize the sum of aesthetic values for the arrangement while keeping the required ordering of the flowers. If more than one arrangement has the maximal sum value, any one of them will be acceptable. You have to produce exactly one arrangement.</p><h2 id="ASSUMPTIONS"><a href="#ASSUMPTIONS" class="headerlink" title="ASSUMPTIONS"></a>ASSUMPTIONS</h2><ul><li><p>1 ≤ F ≤ 100 where F is the number of the bunches of flowers. The bunches are numbered 1 through F.</p></li><li><p>F ≤ V ≤ 100 where V is the number of vases.</p></li><li><p>-50 £ Aij £ 50 where Aij is the aesthetic value obtained by putting the flower bunch i into the vase j.</p></li></ul><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><ul><li>The first line contains two numbers: F, V.</li><li>The following F lines: Each of these lines contains V integers, so that Aij is given as the j’th number on the (i+1)’st line of the input file.</li></ul><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><ul><li>The first line will contain the sum of aesthetic values for your arrangement.</li><li>The second line must present the arrangement as a list of F numbers, so that the k’th number on this line identifies the vase in which the bunch k is put.</li></ul><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 5 </span><br><span class="line">7 23 -5 -24 16</span><br><span class="line">5 21 -4 10 23</span><br><span class="line">-21 5 -4 -20 20</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">53 </span><br><span class="line">2 4 5</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> f, v;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; f &gt;&gt; v;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> table = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(f, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(v));</span><br><span class="line">    <span class="keyword">auto</span> dp = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(f, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(v));</span><br><span class="line">    <span class="keyword">auto</span> pre = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(f, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(v));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; f; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v; j++) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; table[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>] = table[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; f; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v; j++) &#123;</span><br><span class="line">            dp[i][j] = <span class="number">-0x3f3f3f3f</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; j; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[i - <span class="number">1</span>][k] + table[i][j] &gt; dp[i][j]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][k] + table[i][j];</span><br><span class="line">                    pre[i][j] = k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[f - <span class="number">1</span>][i] &gt; dp[f - <span class="number">1</span>][index]) &#123;</span><br><span class="line">            index = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = dp[f - <span class="number">1</span>][index];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path&#123;index&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = f - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        path.push_back(index = pre[i][index]);</span><br><span class="line">    &#125;</span><br><span class="line">    path.pop_back();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = path.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; path[i] + <span class="number">1</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Little-shop-of-flowers&quot;&gt;&lt;a href=&quot;#Little-shop-of-flowers&quot; class=&quot;headerlink&quot; title=&quot;Little shop of flowers&quot;&gt;&lt;/a&gt;Little shop of flowers&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ACMSGURU" scheme="//reckful.studio/categories/ACMSGURU/"/>
    
    
  </entry>
  
  <entry>
    <title>ACMSGURU 275 - To xor or not to xor</title>
    <link href="//reckful.studio/2020/01/02/ACMSGURU/ACMSGURU%20275%20-%20To%20xor%20or%20not%20to%20xor/"/>
    <id>//reckful.studio/2020/01/02/ACMSGURU/ACMSGURU%20275%20-%20To%20xor%20or%20not%20to%20xor/</id>
    <published>2020-01-02T21:48:28.000Z</published>
    <updated>2021-12-20T07:07:18.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="To-xor-or-not-to-xor"><a href="#To-xor-or-not-to-xor" class="headerlink" title="To xor or not to xor"></a>To xor or not to xor</h1><a id="more"></a><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>The sequence of non-negative integers A1, A2, …, AN is given. You are to find some subsequence Ai1, Ai2, …, Aik (1 &lt;= i1 &lt; i2 &lt; … &lt; ik &lt;= N) such, that Ai1 XOR Ai2 XOR … XOR Aik has a maximum value.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line of the input file contains the integer number N (1 &lt;= N &lt;= 100). The second line contains the sequence A1, A2, …, AN (0 &lt;= Ai &lt;= 10^18).</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>Write to the output file a single integer number – the maximum possible value of Ai1 XOR Ai2 XOR … XOR Aik.</p><h2 id="Sample-test-s"><a href="#Sample-test-s" class="headerlink" title="Sample test(s)"></a>Sample test(s)</h2><h3 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h3><p>3</p><p>11 9 5</p><h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h3><p>14</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> nums = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; num : nums) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> index = <span class="number">63</span>; index &gt;= <span class="number">0</span>; index--) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!(nums[i] &amp; (<span class="number">1L</span>L &lt;&lt; index))) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!(res &amp; (<span class="number">1L</span>L &lt;&lt; index))) &#123;</span><br><span class="line">                res ^= nums[i];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.size(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>((nums[j] &amp; (<span class="number">1L</span>L &lt;&lt; index)) &amp;&amp; j != i) &#123;</span><br><span class="line">                    nums[j] ^= nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;To-xor-or-not-to-xor&quot;&gt;&lt;a href=&quot;#To-xor-or-not-to-xor&quot; class=&quot;headerlink&quot; title=&quot;To xor or not to xor&quot;&gt;&lt;/a&gt;To xor or not to xor&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ACMSGURU" scheme="//reckful.studio/categories/ACMSGURU/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 1226 -  The Dining Philosophers</title>
    <link href="//reckful.studio/2019/12/29/LeetCode/LeetCode%201226%20-%20%20The%20Dining%20Philosophers/"/>
    <id>//reckful.studio/2019/12/29/LeetCode/LeetCode%201226%20-%20%20The%20Dining%20Philosophers/</id>
    <published>2019-12-29T23:56:19.000Z</published>
    <updated>2021-12-20T07:07:18.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="The-Dining-Philosophers"><a href="#The-Dining-Philosophers" class="headerlink" title="The Dining Philosophers"></a>The Dining Philosophers</h1><a id="more"></a><h2 id="Desicription"><a href="#Desicription" class="headerlink" title="Desicription"></a>Desicription</h2><p>Five silent philosophers sit at a round table with bowls of spaghetti. Forks are placed between each pair of adjacent philosophers.</p><p>Each philosopher must alternately think and eat. However, a philosopher can only eat spaghetti when they have both left and right forks. Each fork can be held by only one philosopher and so a philosopher can use the fork only if it is not being used by another philosopher. After an individual philosopher finishes eating, they need to put down both forks so that the forks become available to others. A philosopher can take the fork on their right or the one on their left as they become available, but cannot start eating before getting both forks.</p><p>Eating is not limited by the remaining amounts of spaghetti or stomach space; an infinite supply and an infinite demand are assumed.</p><p>Design a discipline of behavior (a concurrent algorithm) such that no philosopher will starve; i.e., each can forever continue to alternate between eating and thinking, assuming that no philosopher can know when others may want to eat or think.</p><p><img src="https://assets.leetcode.com/uploads/2019/09/24/an_illustration_of_the_dining_philosophers_problem.png" alt></p><p>The problem statement and the image above are taken from wikipedia.org</p><p>The philosophers’ ids are numbered from 0 to 4 in a clockwise order. Implement the function void wantsToEat(philosopher, pickLeftFork, pickRightFork, eat, putLeftFork, putRightFork) where:</p><ul><li>philosopher is the id of the philosopher who wants to eat.</li><li>pickLeftFork and pickRightFork are functions you can call to pick the corresponding forks of that philosopher.</li><li>eat is a function you can call to let the philosopher eat once he has picked both forks.</li><li>putLeftFork and pickRightFork are functions you can call to put down the corresponding forks of that philosopher.<br>The philosophers are assumed to be thinking as long as they are not asking to eat (the function is not being called with their number).</li></ul><p>Five threads, each representing a philosopher, will simultaneously use one object of your class to simulate the process. It is possible that the function will be called for the same philosopher more than once, even before the last call ends.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Input: n = 1</span><br><span class="line">Output: [[4,2,1],[4,1,1],[0,1,1],[2,2,1],[2,1,1],[2,0,3],[2,1,2],[2,2,2],[4,0,3],[4,1,2],[0,2,1],[4,2,2],[3,2,1],[3,1,1],[0,0,3],[0,1,2],[0,2,2],[1,2,1],[1,1,1],[3,0,3],[3,1,2],[3,2,2],[1,0,3],[1,1,2],[1,2,2]]</span><br><span class="line">Explanation:</span><br><span class="line">n is the number of times each philosopher will call the function.</span><br><span class="line">The output array describes the calls you made to the functions controlling the forks and the eat function, its format is:</span><br><span class="line">output[i] = [a, b, c] (three integers)</span><br><span class="line">- a is the id of a philosopher.</span><br><span class="line">- b specifies the fork: &#123;1 : left, 2 : right&#125;.</span><br><span class="line">- c specifies the operation: &#123;1 : pick, 2 : put, 3 : eat&#125;.</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>1 &lt;= n &lt;= 60</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DiningPhilosophers</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">sem_t</span> forks[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    DiningPhilosophers() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            sem_init(&amp;forks[i], <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wantsToEat</span><span class="params">(<span class="keyword">int</span> philosopher,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">const</span> <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>()&gt; &amp;pickLeftFork,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">const</span> <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>()&gt; &amp;pickRightFork,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">const</span> <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>()&gt; &amp;eat,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">const</span> <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>()&gt; &amp;putLeftFork,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">const</span> <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>()&gt; &amp;putRightFork)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = philosopher;</span><br><span class="line">        <span class="keyword">int</span> right = (philosopher + <span class="number">1</span>) % <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">            <span class="built_in">std</span>::swap(left, right);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sem_wait(&amp;forks[left]);</span><br><span class="line">        sem_wait(&amp;forks[right]);</span><br><span class="line"></span><br><span class="line">        pickLeftFork();</span><br><span class="line">        pickRightFork();</span><br><span class="line">        eat();</span><br><span class="line">        putLeftFork();</span><br><span class="line">        putRightFork();</span><br><span class="line"></span><br><span class="line">        sem_post(&amp;forks[right]);</span><br><span class="line">        sem_post(&amp;forks[left]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;The-Dining-Philosophers&quot;&gt;&lt;a href=&quot;#The-Dining-Philosophers&quot; class=&quot;headerlink&quot; title=&quot;The Dining Philosophers&quot;&gt;&lt;/a&gt;The Dining Philosophers&lt;/h1&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="//reckful.studio/categories/LeetCode/"/>
    
    
  </entry>
  
</feed>
